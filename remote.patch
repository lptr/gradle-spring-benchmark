diff --git a/build.gradle b/build.gradle
index 11acc8f..30ddb67 100644
--- a/build.gradle
+++ b/build.gradle
@@ -80,7 +80,7 @@ configure(allprojects) { project ->
 	ext.poiVersion             = "3.15"
 	ext.protobufVersion        = "3.2.0"
 	ext.quartzVersion          = "2.2.3"
-	ext.reactorVersion         = "Aluminium-BUILD-SNAPSHOT"
+	ext.reactorVersion         = "Aluminium-SR1"
 	ext.romeVersion            = "1.7.1"
 	ext.rxjavaVersion          = '1.2.9'
 	ext.rxjavaAdapterVersion   = '1.2.1'
diff --git a/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtensions.kt b/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtensions.kt
index ed5f855..dc4f4d1 100644
--- a/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtensions.kt
+++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtensions.kt
@@ -9,7 +9,7 @@ import kotlin.reflect.KClass
  * @author Sebastien Deleuze
  * @since 5.0
  */
-fun <T : Any> BeanFactory.getBean(requiredType: KClass<T>): T = getBean(requiredType.java)
+fun <T : Any> BeanFactory.getBean(requiredType: KClass<T>) = getBean(requiredType.java)
 
 /**
  * Extension for [BeanFactory.getBean] providing a `getBean<Foo>()` variant.
@@ -17,7 +17,7 @@ fun <T : Any> BeanFactory.getBean(requiredType: KClass<T>): T = getBean(required
  * @author Sebastien Deleuze
  * @since 5.0
  */
-inline fun <reified T : Any> BeanFactory.getBean(): T = getBean(T::class.java)
+inline fun <reified T : Any> BeanFactory.getBean() = getBean(T::class.java)
 
 /**
  * Extension for [BeanFactory.getBean] providing a [KClass] based variant.
@@ -26,7 +26,7 @@ inline fun <reified T : Any> BeanFactory.getBean(): T = getBean(T::class.java)
  * @author Sebastien Deleuze
  * @since 5.0
  */
-fun <T : Any> BeanFactory.getBean(name: String, requiredType: KClass<T>): T =
+fun <T : Any> BeanFactory.getBean(name: String, requiredType: KClass<T>) =
 		getBean(name, requiredType.java)
 
 /**
@@ -37,7 +37,7 @@ fun <T : Any> BeanFactory.getBean(name: String, requiredType: KClass<T>): T =
  * @since 5.0
  */
 @Suppress("EXTENSION_SHADOWED_BY_MEMBER")
-inline fun <reified T : Any> BeanFactory.getBean(name: String): T =
+inline fun <reified T : Any> BeanFactory.getBean(name: String) =
 		getBean(name, T::class.java)
 
 /**
@@ -47,7 +47,7 @@ inline fun <reified T : Any> BeanFactory.getBean(name: String): T =
  * @author Sebastien Deleuze
  * @since 5.0
  */
-fun <T : Any> BeanFactory.getBean(requiredType: KClass<T>, vararg args:Any): T =
+fun <T : Any> BeanFactory.getBean(requiredType: KClass<T>, vararg args:Any) =
 		getBean(requiredType.java, *args)
 
 /**
@@ -57,5 +57,5 @@ fun <T : Any> BeanFactory.getBean(requiredType: KClass<T>, vararg args:Any): T =
  * @author Sebastien Deleuze
  * @since 5.0
  */
-inline fun <reified T : Any> BeanFactory.getBean(vararg args:Any): T =
+inline fun <reified T : Any> BeanFactory.getBean(vararg args:Any) =
 		getBean(T::class.java, *args)
diff --git a/spring-beans/src/main/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtensions.kt b/spring-beans/src/main/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtensions.kt
index cf7f418..4f36986 100644
--- a/spring-beans/src/main/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtensions.kt
+++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtensions.kt
@@ -10,8 +10,8 @@ import kotlin.reflect.KClass
  * @since 5.0
  */
 fun <T : Any> ListableBeanFactory.getBeanNamesForType(type: KClass<T>,
-		includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Array<out String> =
-	getBeanNamesForType(type.java, includeNonSingletons, allowEagerInit)
+		includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true) =
+				getBeanNamesForType(type.java, includeNonSingletons, allowEagerInit)
 
 /**
  * Extension for [ListableBeanFactory.getBeanNamesForType] providing a `getBeanNamesForType<Foo>()` variant.
@@ -19,8 +19,8 @@ fun <T : Any> ListableBeanFactory.getBeanNamesForType(type: KClass<T>,
  * @author Sebastien Deleuze
  * @since 5.0
  */
-inline fun <reified T : Any> ListableBeanFactory.getBeanNamesForType(includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Array<out String> =
-	getBeanNamesForType(T::class.java, includeNonSingletons, allowEagerInit)
+inline fun <reified T : Any> ListableBeanFactory.getBeanNamesForType(includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true) =
+				getBeanNamesForType(T::class.java, includeNonSingletons, allowEagerInit)
 
 /**
  * Extension for [ListableBeanFactory.getBeansOfType] providing a [KClass] based variant.
@@ -28,8 +28,9 @@ inline fun <reified T : Any> ListableBeanFactory.getBeanNamesForType(includeNonS
  * @author Sebastien Deleuze
  * @since 5.0
  */
-fun <T : Any> ListableBeanFactory.getBeansOfType(type: KClass<T>, includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Map<String, Any> =
-	getBeansOfType(type.java, includeNonSingletons, allowEagerInit)
+fun <T : Any> ListableBeanFactory.getBeansOfType(type: KClass<T>,
+		includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true) =
+				getBeansOfType(type.java, includeNonSingletons, allowEagerInit)
 
 /**
  * Extension for [ListableBeanFactory.getBeansOfType] providing a `getBeansOfType<Foo>()` variant.
@@ -37,7 +38,7 @@ fun <T : Any> ListableBeanFactory.getBeansOfType(type: KClass<T>, includeNonSing
  * @author Sebastien Deleuze
  * @since 5.0
  */
-inline fun <reified T : Any> ListableBeanFactory.getBeansOfType(includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Map<String, Any> =
+inline fun <reified T : Any> ListableBeanFactory.getBeansOfType(includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true) =
 				getBeansOfType(T::class.java, includeNonSingletons, allowEagerInit)
 
 /**
@@ -46,7 +47,7 @@ inline fun <reified T : Any> ListableBeanFactory.getBeansOfType(includeNonSingle
  * @author Sebastien Deleuze
  * @since 5.0
  */
-fun <T : Annotation> ListableBeanFactory.getBeanNamesForAnnotation(type: KClass<T>): Array<out String> =
+fun <T : Annotation> ListableBeanFactory.getBeanNamesForAnnotation(type: KClass<T>) =
 		getBeanNamesForAnnotation(type.java)
 
 /**
@@ -55,7 +56,7 @@ fun <T : Annotation> ListableBeanFactory.getBeanNamesForAnnotation(type: KClass<
  * @author Sebastien Deleuze
  * @since 5.0
  */
-inline fun <reified T : Annotation> ListableBeanFactory.getBeanNamesForAnnotation(): Array<out String> =
+inline fun <reified T : Annotation> ListableBeanFactory.getBeanNamesForAnnotation() =
 		getBeanNamesForAnnotation(T::class.java)
 
 /**
@@ -64,7 +65,7 @@ inline fun <reified T : Annotation> ListableBeanFactory.getBeanNamesForAnnotatio
  * @author Sebastien Deleuze
  * @since 5.0
  */
-fun <T : Annotation> ListableBeanFactory.getBeansWithAnnotation(type: KClass<T>): MutableMap<String, Any> =
+fun <T : Annotation> ListableBeanFactory.getBeansWithAnnotation(type: KClass<T>) =
 		getBeansWithAnnotation(type.java)
 
 /**
@@ -73,7 +74,7 @@ fun <T : Annotation> ListableBeanFactory.getBeansWithAnnotation(type: KClass<T>)
  * @author Sebastien Deleuze
  * @since 5.0
  */
-inline fun <reified T : Annotation> ListableBeanFactory.getBeansWithAnnotation(): MutableMap<String, Any> =
+inline fun <reified T : Annotation> ListableBeanFactory.getBeansWithAnnotation() =
 		getBeansWithAnnotation(T::class.java)
 
 /**
@@ -82,7 +83,7 @@ inline fun <reified T : Annotation> ListableBeanFactory.getBeansWithAnnotation()
  * @author Sebastien Deleuze
  * @since 5.0
  */
-fun <T : Annotation> ListableBeanFactory.findAnnotationOnBean(beanName:String, type: KClass<T>): Annotation? =
+fun <T : Annotation> ListableBeanFactory.findAnnotationOnBean(beanName:String, type: KClass<T>) =
 		findAnnotationOnBean(beanName, type.java)
 
 /**
@@ -91,6 +92,6 @@ fun <T : Annotation> ListableBeanFactory.findAnnotationOnBean(beanName:String, t
  * @author Sebastien Deleuze
  * @since 5.0
  */
-inline fun <reified T : Annotation> ListableBeanFactory.findAnnotationOnBean(beanName:String): Annotation? =
+inline fun <reified T : Annotation> ListableBeanFactory.findAnnotationOnBean(beanName:String) =
 		findAnnotationOnBean(beanName, T::class.java)
 
diff --git a/spring-context/src/main/kotlin/org/springframework/context/annotation/AnnotationConfigApplicationContextExtensions.kt b/spring-context/src/main/kotlin/org/springframework/context/annotation/AnnotationConfigApplicationContextExtensions.kt
index 0a16ac2..8025983 100644
--- a/spring-context/src/main/kotlin/org/springframework/context/annotation/AnnotationConfigApplicationContextExtensions.kt
+++ b/spring-context/src/main/kotlin/org/springframework/context/annotation/AnnotationConfigApplicationContextExtensions.kt
@@ -7,5 +7,5 @@ package org.springframework.context.annotation
  * @author Sebastien Deleuze
  * @since 5.0
  */
-fun AnnotationConfigApplicationContext(configure: AnnotationConfigApplicationContext.() -> Unit) =
+fun AnnotationConfigApplicationContext(configure: AnnotationConfigApplicationContext.()->Unit) =
 		AnnotationConfigApplicationContext().apply(configure)
diff --git a/spring-context/src/main/kotlin/org/springframework/context/support/GenericApplicationContextExtensions.kt b/spring-context/src/main/kotlin/org/springframework/context/support/GenericApplicationContextExtensions.kt
index 59acb1f..7337ddd 100644
--- a/spring-context/src/main/kotlin/org/springframework/context/support/GenericApplicationContextExtensions.kt
+++ b/spring-context/src/main/kotlin/org/springframework/context/support/GenericApplicationContextExtensions.kt
@@ -12,8 +12,9 @@ import kotlin.reflect.KClass
  * @author Sebastien Deleuze
  * @since 5.0
  */
-fun <T : Any> GenericApplicationContext.registerBean(beanClass: KClass<T>, vararg customizers: BeanDefinitionCustomizer) {
-	registerBean(beanClass.java, *customizers)
+fun <T : Any> GenericApplicationContext.registerBean(beanClass: KClass<T>,
+		vararg customizers: BeanDefinitionCustomizer) {
+				registerBean(beanClass.java, *customizers)
 }
 
 /**
@@ -23,7 +24,7 @@ fun <T : Any> GenericApplicationContext.registerBean(beanClass: KClass<T>, varar
  * @since 5.0
  */
 inline fun <reified T : Any> GenericApplicationContext.registerBean(vararg customizers: BeanDefinitionCustomizer) {
-	registerBean(T::class.java, *customizers)
+				registerBean(T::class.java, *customizers)
 }
 
 /**
@@ -32,8 +33,9 @@ inline fun <reified T : Any> GenericApplicationContext.registerBean(vararg custo
  * @author Sebastien Deleuze
  * @since 5.0
  */
-fun <T : Any> GenericApplicationContext.registerBean(beanName: String, beanClass: KClass<T>, vararg customizers: BeanDefinitionCustomizer) {
-	registerBean(beanName, beanClass.java, *customizers)
+fun <T : Any> GenericApplicationContext.registerBean(beanName: String, beanClass: KClass<T>,
+		vararg customizers: BeanDefinitionCustomizer) {
+				registerBean(beanName, beanClass.java, *customizers)
 }
 
 /**
@@ -43,7 +45,7 @@ fun <T : Any> GenericApplicationContext.registerBean(beanName: String, beanClass
  * @since 5.0
  */
 inline fun <reified T : Any> GenericApplicationContext.registerBean(beanName: String, vararg customizers: BeanDefinitionCustomizer) {
-	registerBean(beanName, T::class.java, *customizers)
+				registerBean(beanName, T::class.java, *customizers)
 }
 
 /**
@@ -54,7 +56,7 @@ inline fun <reified T : Any> GenericApplicationContext.registerBean(beanName: St
  */
 inline fun <reified T : Any> GenericApplicationContext.registerBean(
 		vararg customizers: BeanDefinitionCustomizer, crossinline function: (ApplicationContext) -> T) {
-	registerBean(T::class.java, Supplier { function.invoke(this) }, *customizers)
+				registerBean(T::class.java, Supplier { function.invoke(this) }, *customizers)
 }
 
 /**
@@ -65,7 +67,7 @@ inline fun <reified T : Any> GenericApplicationContext.registerBean(
  */
 inline fun <reified T : Any> GenericApplicationContext.registerBean(name: String,
 		vararg customizers: BeanDefinitionCustomizer, crossinline function: (ApplicationContext) -> T) {
-	registerBean(name, T::class.java, Supplier { function.invoke(this) }, *customizers)
+				registerBean(name, T::class.java, Supplier { function.invoke(this) }, *customizers)
 }
 
 /**
@@ -74,5 +76,5 @@ inline fun <reified T : Any> GenericApplicationContext.registerBean(name: String
  * @author Sebastien Deleuze
  * @since 5.0
  */
-fun GenericApplicationContext(configure: GenericApplicationContext.() -> Unit) = GenericApplicationContext().apply(configure)
+fun GenericApplicationContext(configure: GenericApplicationContext.()->Unit) = GenericApplicationContext().apply(configure)
 
diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java
index 2c3078d..5e12bed 100644
--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java
+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java
@@ -103,7 +103,6 @@ public abstract class DataBufferUtils {
 	 * @param bufferSize the maximum size of the data buffers
 	 * @return a flux of data buffers read from the given channel
 	 */
-	@SuppressWarnings("deprecation")
 	public static Flux<DataBuffer> read(AsynchronousFileChannel channel,
 			long position, DataBufferFactory dataBufferFactory, int bufferSize) {
 
diff --git a/spring-test/src/main/java/org/springframework/mock/http/client/MockAsyncClientHttpRequest.java b/spring-test/src/main/java/org/springframework/mock/http/client/MockAsyncClientHttpRequest.java
index 6207d86..975f5a2 100644
--- a/spring-test/src/main/java/org/springframework/mock/http/client/MockAsyncClientHttpRequest.java
+++ b/spring-test/src/main/java/org/springframework/mock/http/client/MockAsyncClientHttpRequest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,22 +20,21 @@ import java.io.IOException;
 import java.net.URI;
 
 import org.springframework.http.HttpMethod;
+import org.springframework.http.client.AsyncClientHttpRequest;
 import org.springframework.http.client.ClientHttpResponse;
 import org.springframework.util.concurrent.ListenableFuture;
 import org.springframework.util.concurrent.SettableListenableFuture;
 
 /**
  * An extension of {@link MockClientHttpRequest} that also implements
- * {@link org.springframework.http.client.AsyncClientHttpRequest} by wrapping the response in a
+ * {@link AsyncClientHttpRequest} by wrapping the response in a
  * {@link SettableListenableFuture}.
  *
  * @author Rossen Stoyanchev
  * @author Sam Brannen
  * @since 4.1
- * @deprecated as of Spring 5.0, with no direct replacement
  */
-@Deprecated
-public class MockAsyncClientHttpRequest extends MockClientHttpRequest implements org.springframework.http.client.AsyncClientHttpRequest {
+public class MockAsyncClientHttpRequest extends MockClientHttpRequest implements AsyncClientHttpRequest {
 
 	public MockAsyncClientHttpRequest() {
 	}
diff --git a/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java b/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java
index 4ef493c..09207f8 100644
--- a/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java
+++ b/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,10 +20,14 @@ import java.io.IOException;
 import java.net.URI;
 
 import org.springframework.http.HttpMethod;
+import org.springframework.http.client.AsyncClientHttpRequest;
+import org.springframework.http.client.AsyncClientHttpRequestFactory;
 import org.springframework.http.client.ClientHttpRequest;
 import org.springframework.http.client.ClientHttpRequestFactory;
 import org.springframework.http.client.ClientHttpResponse;
+import org.springframework.mock.http.client.MockAsyncClientHttpRequest;
 import org.springframework.util.Assert;
+import org.springframework.web.client.AsyncRestTemplate;
 import org.springframework.web.client.RestTemplate;
 import org.springframework.web.client.support.RestGatewaySupport;
 
@@ -61,7 +65,6 @@ import org.springframework.web.client.support.RestGatewaySupport;
  * @author Rossen Stoyanchev
  * @since 3.2
  */
-@SuppressWarnings("deprecation")
 public class MockRestServiceServer {
 
 	private final RequestExpectationManager expectationManager;
@@ -136,7 +139,7 @@ public class MockRestServiceServer {
 	 * to reply to the given {@code AsyncRestTemplate}.
 	 * @since 4.3
 	 */
-	public static MockRestServiceServerBuilder bindTo(org.springframework.web.client.AsyncRestTemplate asyncRestTemplate) {
+	public static MockRestServiceServerBuilder bindTo(AsyncRestTemplate asyncRestTemplate) {
 		return new DefaultBuilder(asyncRestTemplate);
 	}
 
@@ -165,7 +168,7 @@ public class MockRestServiceServer {
 	 * @param asyncRestTemplate the AsyncRestTemplate to set up for mock testing
 	 * @return the created mock server
 	 */
-	public static MockRestServiceServer createServer(org.springframework.web.client.AsyncRestTemplate asyncRestTemplate) {
+	public static MockRestServiceServer createServer(AsyncRestTemplate asyncRestTemplate) {
 		return bindTo(asyncRestTemplate).build();
 	}
 
@@ -212,7 +215,7 @@ public class MockRestServiceServer {
 
 		private final RestTemplate restTemplate;
 
-		private final org.springframework.web.client.AsyncRestTemplate asyncRestTemplate;
+		private final AsyncRestTemplate asyncRestTemplate;
 
 		private boolean ignoreExpectOrder;
 
@@ -222,7 +225,7 @@ public class MockRestServiceServer {
 			this.asyncRestTemplate = null;
 		}
 
-		public DefaultBuilder(org.springframework.web.client.AsyncRestTemplate asyncRestTemplate) {
+		public DefaultBuilder(AsyncRestTemplate asyncRestTemplate) {
 			Assert.notNull(asyncRestTemplate, "AsyncRestTemplate must not be null");
 			this.restTemplate = null;
 			this.asyncRestTemplate = asyncRestTemplate;
@@ -263,8 +266,7 @@ public class MockRestServiceServer {
 	 * Mock ClientHttpRequestFactory that creates requests by iterating
 	 * over the list of expected {@link DefaultRequestExpectation}'s.
 	 */
-	@SuppressWarnings("deprecation")
-	private class MockClientHttpRequestFactory implements ClientHttpRequestFactory, org.springframework.http.client.AsyncClientHttpRequestFactory {
+	private class MockClientHttpRequestFactory implements ClientHttpRequestFactory, AsyncClientHttpRequestFactory {
 
 		@Override
 		public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) {
@@ -272,15 +274,15 @@ public class MockRestServiceServer {
 		}
 
 		@Override
-		public org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) {
+		public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) {
 			return createRequestInternal(uri, httpMethod);
 		}
 
-		private org.springframework.mock.http.client.MockAsyncClientHttpRequest createRequestInternal(URI uri, HttpMethod method) {
+		private MockAsyncClientHttpRequest createRequestInternal(URI uri, HttpMethod method) {
 			Assert.notNull(uri, "'uri' must not be null");
 			Assert.notNull(method, "'httpMethod' must not be null");
 
-			return new org.springframework.mock.http.client.MockAsyncClientHttpRequest(method, uri) {
+			return new MockAsyncClientHttpRequest(method, uri) {
 
 				@Override
 				protected ClientHttpResponse executeInternal() throws IOException {
diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java
index 92f0f8b..0eefdce 100644
--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java
+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java
@@ -34,7 +34,6 @@ import reactor.core.publisher.Mono;
 import org.springframework.core.ResolvableType;
 import org.springframework.core.io.buffer.DataBuffer;
 import org.springframework.http.HttpHeaders;
-import org.springframework.http.HttpMethod;
 import org.springframework.http.MediaType;
 import org.springframework.http.client.reactive.ClientHttpConnector;
 import org.springframework.http.client.reactive.ClientHttpRequest;
@@ -98,45 +97,42 @@ class DefaultWebTestClient implements WebTestClient {
 
 
 	@Override
-	public UriSpec<RequestHeadersSpec<?>> get() {
-		return toUriSpec(wc -> wc.method(HttpMethod.GET));
+	public UriSpec get() {
+		return toUriSpec(WebClient::get);
 	}
 
 	@Override
-	public UriSpec<RequestHeadersSpec<?>> head() {
-		return toUriSpec(wc -> wc.method(HttpMethod.HEAD));
+	public UriSpec head() {
+		return toUriSpec(WebClient::head);
 	}
 
 	@Override
-	public UriSpec<RequestBodySpec> post() {
-		return toUriSpec(wc -> wc.method(HttpMethod.POST));
+	public UriSpec post() {
+		return toUriSpec(WebClient::post);
 	}
 
 	@Override
-	public UriSpec<RequestBodySpec> put() {
-		return toUriSpec(wc -> wc.method(HttpMethod.PUT));
+	public UriSpec put() {
+		return toUriSpec(WebClient::put);
 	}
 
 	@Override
-	public UriSpec<RequestBodySpec> patch() {
-		return toUriSpec(wc -> wc.method(HttpMethod.PATCH));
+	public UriSpec patch() {
+		return toUriSpec(WebClient::patch);
 	}
 
 	@Override
-	public UriSpec<RequestHeadersSpec<?>> delete() {
-		return toUriSpec(wc -> wc.method(HttpMethod.DELETE));
+	public UriSpec delete() {
+		return toUriSpec(WebClient::delete);
 	}
 
 	@Override
-	public UriSpec<RequestHeadersSpec<?>> options() {
-		return toUriSpec(wc -> wc.method(HttpMethod.OPTIONS));
+	public UriSpec options() {
+		return toUriSpec(WebClient::options);
 	}
 
-	@SuppressWarnings("unchecked")
-	private <S extends RequestHeadersSpec<?>> UriSpec<S> toUriSpec(
-			Function<WebClient, WebClient.UriSpec<WebClient.RequestBodySpec>> function) {
-
-		return new DefaultUriSpec<>(function.apply(this.webClient));
+	private UriSpec toUriSpec(Function<WebClient, WebClient.UriSpec> function) {
+		return new DefaultUriSpec(function.apply(this.webClient));
 	}
 
 
@@ -160,132 +156,123 @@ class DefaultWebTestClient implements WebTestClient {
 	}
 
 
-	@SuppressWarnings("unchecked")
-	private class DefaultUriSpec<S extends RequestHeadersSpec<?>> implements UriSpec<S> {
+	private class DefaultUriSpec implements UriSpec {
 
-		private final WebClient.UriSpec<WebClient.RequestBodySpec> uriSpec;
+		private final WebClient.UriSpec uriSpec;
 
 
-		DefaultUriSpec(WebClient.UriSpec<WebClient.RequestBodySpec> spec) {
+		DefaultUriSpec(WebClient.UriSpec spec) {
 			this.uriSpec = spec;
 		}
 
 		@Override
-		public S uri(URI uri) {
-			return (S) new DefaultRequestBodySpec(this.uriSpec.uri(uri));
+		public HeaderSpec uri(URI uri) {
+			return new DefaultHeaderSpec(this.uriSpec.uri(uri));
 		}
 
 		@Override
-		public S uri(String uriTemplate, Object... uriVariables) {
-			return (S) new DefaultRequestBodySpec(this.uriSpec.uri(uriTemplate, uriVariables));
+		public HeaderSpec uri(String uriTemplate, Object... uriVariables) {
+			return new DefaultHeaderSpec(this.uriSpec.uri(uriTemplate, uriVariables));
 		}
 
 		@Override
-		public S uri(String uriTemplate, Map<String, ?> uriVariables) {
-			return (S) new DefaultRequestBodySpec(this.uriSpec.uri(uriTemplate, uriVariables));
+		public HeaderSpec uri(String uriTemplate, Map<String, ?> uriVariables) {
+			return new DefaultHeaderSpec(this.uriSpec.uri(uriTemplate, uriVariables));
 		}
 
 		@Override
-		public S uri(Function<UriBuilder, URI> uriBuilder) {
-			return (S) new DefaultRequestBodySpec(this.uriSpec.uri(uriBuilder));
+		public HeaderSpec uri(Function<UriBuilder, URI> uriBuilder) {
+			return new DefaultHeaderSpec(this.uriSpec.uri(uriBuilder));
 		}
 	}
 
-	private class DefaultRequestBodySpec implements RequestBodySpec {
+	private class DefaultHeaderSpec implements WebTestClient.HeaderSpec {
 
-		private final WebClient.RequestBodySpec bodySpec;
+		private final WebClient.HeaderSpec headerSpec;
 
 		private final String requestId;
 
 
-		DefaultRequestBodySpec(WebClient.RequestBodySpec spec) {
-			this.bodySpec = spec;
+		DefaultHeaderSpec(WebClient.HeaderSpec spec) {
+			this.headerSpec = spec;
 			this.requestId = String.valueOf(requestIndex.incrementAndGet());
-			this.bodySpec.header(WiretapConnector.REQUEST_ID_HEADER_NAME, this.requestId);
+			this.headerSpec.header(WiretapConnector.REQUEST_ID_HEADER_NAME, this.requestId);
 		}
 
 
 		@Override
-		public RequestBodySpec header(String headerName, String... headerValues) {
-			this.bodySpec.header(headerName, headerValues);
+		public DefaultHeaderSpec header(String headerName, String... headerValues) {
+			this.headerSpec.header(headerName, headerValues);
 			return this;
 		}
 
 		@Override
-		public RequestBodySpec headers(HttpHeaders headers) {
-			this.bodySpec.headers(headers);
+		public DefaultHeaderSpec headers(HttpHeaders headers) {
+			this.headerSpec.headers(headers);
 			return this;
 		}
 
 		@Override
-		public RequestBodySpec accept(MediaType... acceptableMediaTypes) {
-			this.bodySpec.accept(acceptableMediaTypes);
+		public DefaultHeaderSpec accept(MediaType... acceptableMediaTypes) {
+			this.headerSpec.accept(acceptableMediaTypes);
 			return this;
 		}
 
 		@Override
-		public RequestBodySpec acceptCharset(Charset... acceptableCharsets) {
-			this.bodySpec.acceptCharset(acceptableCharsets);
+		public DefaultHeaderSpec acceptCharset(Charset... acceptableCharsets) {
+			this.headerSpec.acceptCharset(acceptableCharsets);
 			return this;
 		}
 
 		@Override
-		public RequestBodySpec contentType(MediaType contentType) {
-			this.bodySpec.contentType(contentType);
+		public DefaultHeaderSpec contentType(MediaType contentType) {
+			this.headerSpec.contentType(contentType);
 			return this;
 		}
 
 		@Override
-		public RequestBodySpec contentLength(long contentLength) {
-			this.bodySpec.contentLength(contentLength);
+		public DefaultHeaderSpec contentLength(long contentLength) {
+			this.headerSpec.contentLength(contentLength);
 			return this;
 		}
 
 		@Override
-		public RequestBodySpec cookie(String name, String value) {
-			this.bodySpec.cookie(name, value);
+		public DefaultHeaderSpec cookie(String name, String value) {
+			this.headerSpec.cookie(name, value);
 			return this;
 		}
 
 		@Override
-		public RequestBodySpec cookies(MultiValueMap<String, String> cookies) {
-			this.bodySpec.cookies(cookies);
+		public DefaultHeaderSpec cookies(MultiValueMap<String, String> cookies) {
+			this.headerSpec.cookies(cookies);
 			return this;
 		}
 
 		@Override
-		public RequestBodySpec ifModifiedSince(ZonedDateTime ifModifiedSince) {
-			this.bodySpec.ifModifiedSince(ifModifiedSince);
+		public DefaultHeaderSpec ifModifiedSince(ZonedDateTime ifModifiedSince) {
+			this.headerSpec.ifModifiedSince(ifModifiedSince);
 			return this;
 		}
 
 		@Override
-		public RequestBodySpec ifNoneMatch(String... ifNoneMatches) {
-			this.bodySpec.ifNoneMatch(ifNoneMatches);
+		public DefaultHeaderSpec ifNoneMatch(String... ifNoneMatches) {
+			this.headerSpec.ifNoneMatch(ifNoneMatches);
 			return this;
 		}
 
 		@Override
 		public ResponseSpec exchange() {
-			return toResponseSpec(this.bodySpec.exchange());
+			return toResponseSpec(this.headerSpec.exchange());
 		}
 
 		@Override
-		public <T> RequestHeadersSpec<?> body(BodyInserter<T, ? super ClientHttpRequest> inserter) {
-			this.bodySpec.body(inserter);
-			return this;
+		public <T> ResponseSpec exchange(BodyInserter<T, ? super ClientHttpRequest> inserter) {
+			return toResponseSpec(this.headerSpec.exchange(inserter));
 		}
 
 		@Override
-		public <T, S extends Publisher<T>> RequestHeadersSpec<?> body(S publisher, Class<T> elementClass) {
-			this.bodySpec.body(publisher, elementClass);
-			return this;
-		}
-
-		@Override
-		public <T> RequestHeadersSpec<?> body(T body) {
-			this.bodySpec.body(body);
-			return this;
+		public <T, S extends Publisher<T>> ResponseSpec exchange(S publisher, Class<T> elementClass) {
+			return toResponseSpec(this.headerSpec.exchange(publisher, elementClass));
 		}
 
 		private DefaultResponseSpec toResponseSpec(Mono<ClientResponse> mono) {
diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java
index 155107a..8b1750e 100644
--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java
+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java
@@ -78,43 +78,43 @@ public interface WebTestClient {
 	 * Prepare an HTTP GET request.
 	 * @return a spec for specifying the target URL
 	 */
-	UriSpec<RequestHeadersSpec<?>> get();
+	UriSpec get();
 
 	/**
 	 * Prepare an HTTP HEAD request.
 	 * @return a spec for specifying the target URL
 	 */
-	UriSpec<RequestHeadersSpec<?>> head();
+	UriSpec head();
 
 	/**
 	 * Prepare an HTTP POST request.
 	 * @return a spec for specifying the target URL
 	 */
-	UriSpec<RequestBodySpec> post();
+	UriSpec post();
 
 	/**
 	 * Prepare an HTTP PUT request.
 	 * @return a spec for specifying the target URL
 	 */
-	UriSpec<RequestBodySpec> put();
+	UriSpec put();
 
 	/**
 	 * Prepare an HTTP PATCH request.
 	 * @return a spec for specifying the target URL
 	 */
-	UriSpec<RequestBodySpec> patch();
+	UriSpec patch();
 
 	/**
 	 * Prepare an HTTP DELETE request.
 	 * @return a spec for specifying the target URL
 	 */
-	UriSpec<RequestHeadersSpec<?>> delete();
+	UriSpec delete();
 
 	/**
 	 * Prepare an HTTP OPTIONS request.
 	 * @return a spec for specifying the target URL
 	 */
-	UriSpec<RequestHeadersSpec<?>> options();
+	UriSpec options();
 
 
 	/**
@@ -327,13 +327,13 @@ public interface WebTestClient {
 	/**
 	 * Specification for providing the URI of a request.
 	 */
-	interface UriSpec<S extends RequestHeadersSpec<?>> {
+	interface UriSpec {
 
 		/**
 		 * Specify the URI using an absolute, fully constructed {@link URI}.
 		 * @return spec to add headers or perform the exchange
 		 */
-		S uri(URI uri);
+		HeaderSpec uri(URI uri);
 
 		/**
 		 * Specify the URI for the request using a URI template and URI variables.
@@ -341,7 +341,7 @@ public interface WebTestClient {
 		 * with a base URI) it will be used to expand the URI template.
 		 * @return spec to add headers or perform the exchange
 		 */
-		S uri(String uri, Object... uriVariables);
+		HeaderSpec uri(String uri, Object... uriVariables);
 
 		/**
 		 * Specify the URI for the request using a URI template and URI variables.
@@ -349,21 +349,21 @@ public interface WebTestClient {
 		 * with a base URI) it will be used to expand the URI template.
 		 * @return spec to add headers or perform the exchange
 		 */
-		S uri(String uri, Map<String, ?> uriVariables);
+		HeaderSpec uri(String uri, Map<String, ?> uriVariables);
 
 		/**
 		 * Build the URI for the request with a {@link UriBuilder} obtained
 		 * through the {@link UriBuilderFactory} configured for this client.
 		 * @return spec to add headers or perform the exchange
 		 */
-		S uri(Function<UriBuilder, URI> uriFunction);
+		HeaderSpec uri(Function<UriBuilder, URI> uriFunction);
 
 	}
 
 	/**
 	 * Specification for adding request headers and performing an exchange.
 	 */
-	interface RequestHeadersSpec<S extends RequestHeadersSpec<S>> {
+	interface HeaderSpec {
 
 		/**
 		 * Set the list of acceptable {@linkplain MediaType media types}, as
@@ -371,7 +371,7 @@ public interface WebTestClient {
 		 * @param acceptableMediaTypes the acceptable media types
 		 * @return the same instance
 		 */
-		S accept(MediaType... acceptableMediaTypes);
+		HeaderSpec accept(MediaType... acceptableMediaTypes);
 
 		/**
 		 * Set the list of acceptable {@linkplain Charset charsets}, as specified
@@ -379,7 +379,25 @@ public interface WebTestClient {
 		 * @param acceptableCharsets the acceptable charsets
 		 * @return the same instance
 		 */
-		S acceptCharset(Charset... acceptableCharsets);
+		HeaderSpec acceptCharset(Charset... acceptableCharsets);
+
+		/**
+		 * Set the length of the body in bytes, as specified by the
+		 * {@code Content-Length} header.
+		 * @param contentLength the content length
+		 * @return the same instance
+		 * @see HttpHeaders#setContentLength(long)
+		 */
+		HeaderSpec contentLength(long contentLength);
+
+		/**
+		 * Set the {@linkplain MediaType media type} of the body, as specified
+		 * by the {@code Content-Type} header.
+		 * @param contentType the content type
+		 * @return the same instance
+		 * @see HttpHeaders#setContentType(MediaType)
+		 */
+		HeaderSpec contentType(MediaType contentType);
 
 		/**
 		 * Add a cookie with the given name and value.
@@ -387,7 +405,7 @@ public interface WebTestClient {
 		 * @param value the cookie value
 		 * @return the same instance
 		 */
-		S cookie(String name, String value);
+		HeaderSpec cookie(String name, String value);
 
 		/**
 		 * Copy the given cookies into the entity's cookies map.
@@ -395,7 +413,7 @@ public interface WebTestClient {
 		 * @param cookies the existing cookies to copy from
 		 * @return the same instance
 		 */
-		S cookies(MultiValueMap<String, String> cookies);
+		HeaderSpec cookies(MultiValueMap<String, String> cookies);
 
 		/**
 		 * Set the value of the {@code If-Modified-Since} header.
@@ -404,14 +422,14 @@ public interface WebTestClient {
 		 * @param ifModifiedSince the new value of the header
 		 * @return the same instance
 		 */
-		S ifModifiedSince(ZonedDateTime ifModifiedSince);
+		HeaderSpec ifModifiedSince(ZonedDateTime ifModifiedSince);
 
 		/**
 		 * Set the values of the {@code If-None-Match} header.
 		 * @param ifNoneMatches the new value of the header
 		 * @return the same instance
 		 */
-		S ifNoneMatch(String... ifNoneMatches);
+		HeaderSpec ifNoneMatch(String... ifNoneMatches);
 
 		/**
 		 * Add the given, single header value under the given name.
@@ -419,14 +437,14 @@ public interface WebTestClient {
 		 * @param headerValues the header value(s)
 		 * @return the same instance
 		 */
-		S header(String headerName, String... headerValues);
+		HeaderSpec header(String headerName, String... headerValues);
 
 		/**
 		 * Copy the given headers into the entity's headers map.
 		 * @param headers the existing headers to copy from
 		 * @return the same instance
 		 */
-		S headers(HttpHeaders headers);
+		HeaderSpec headers(HttpHeaders headers);
 
 		/**
 		 * Perform the exchange without a request body.
@@ -434,55 +452,26 @@ public interface WebTestClient {
 		 */
 		ResponseSpec exchange();
 
-	}
-
-	interface RequestBodySpec extends RequestHeadersSpec<RequestBodySpec> {
 		/**
-		 * Set the length of the body in bytes, as specified by the
-		 * {@code Content-Length} header.
-		 * @param contentLength the content length
-		 * @return the same instance
-		 * @see HttpHeaders#setContentLength(long)
-		 */
-		RequestBodySpec contentLength(long contentLength);
-
-		/**
-		 * Set the {@linkplain MediaType media type} of the body, as specified
-		 * by the {@code Content-Type} header.
-		 * @param contentType the content type
-		 * @return the same instance
-		 * @see HttpHeaders#setContentType(MediaType)
-		 */
-		RequestBodySpec contentType(MediaType contentType);
-
-		/**
-		 * Set the body of the request to the given {@code BodyInserter}.
+		 * Perform the exchange with the body for the request populated using
+		 * a {@link BodyInserter}.
 		 * @param inserter the inserter
 		 * @param <T> the body type, or the the element type (for a stream)
 		 * @return spec for decoding the response
 		 * @see org.springframework.web.reactive.function.BodyInserters
 		 */
-		<T> RequestHeadersSpec<?> body(BodyInserter<T, ? super ClientHttpRequest> inserter);
+		<T> ResponseSpec exchange(BodyInserter<T, ? super ClientHttpRequest> inserter);
 
 		/**
-		 * Set the body of the request to the given {@code Publisher}.
+		 * Perform the exchange and use the given {@code Publisher} for the
+		 * request body.
 		 * @param publisher the request body data
 		 * @param elementClass the class of elements contained in the publisher
 		 * @param <T> the type of the elements contained in the publisher
 		 * @param <S> the type of the {@code Publisher}
 		 * @return spec for decoding the response
 		 */
-		<T, S extends Publisher<T>> RequestHeadersSpec<?> body(S publisher, Class<T> elementClass);
-
-		/**
-		 * Set the body of the request to the given {@code Object} and
-		 * perform the request.
-		 * @param body the {@code Object} to write to the request
-		 * @param <T> the type contained in the body
-		 * @return a {@code Mono} with the response
-		 */
-		<T> RequestHeadersSpec<?> body(T body);
-
+		<T, S extends Publisher<T>> ResponseSpec exchange(S publisher, Class<T> elementClass);
 	}
 
 	/**
diff --git a/spring-test/src/test/java/org/springframework/test/web/client/samples/SampleAsyncTests.java b/spring-test/src/test/java/org/springframework/test/web/client/samples/SampleAsyncTests.java
index 18843a0..091b64d 100644
--- a/spring-test/src/test/java/org/springframework/test/web/client/samples/SampleAsyncTests.java
+++ b/spring-test/src/test/java/org/springframework/test/web/client/samples/SampleAsyncTests.java
@@ -42,7 +42,6 @@ import static org.springframework.test.web.client.response.MockRestResponseCreat
  * @author Rossen Stoyanchev
  * @since 4.1
  */
-@SuppressWarnings("deprecation")
 public class SampleAsyncTests {
 
 	private final AsyncRestTemplate restTemplate = new AsyncRestTemplate();
diff --git a/spring-test/src/test/java/org/springframework/test/web/reactive/server/WebTestClientConnectorTests.java b/spring-test/src/test/java/org/springframework/test/web/reactive/server/WebTestClientConnectorTests.java
index 81ef71e..3a3d888 100644
--- a/spring-test/src/test/java/org/springframework/test/web/reactive/server/WebTestClientConnectorTests.java
+++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/WebTestClientConnectorTests.java
@@ -32,7 +32,6 @@ import org.springframework.web.reactive.function.client.ClientRequest;
 import org.springframework.web.reactive.function.client.ExchangeFunction;
 import org.springframework.web.reactive.function.client.ExchangeFunctions;
 
-import static java.time.Duration.*;
 import static org.junit.Assert.*;
 
 /**
@@ -54,7 +53,7 @@ public class WebTestClientConnectorTests {
 
 		WiretapConnector wiretapConnector = new WiretapConnector(connector);
 		ExchangeFunction function = ExchangeFunctions.create(wiretapConnector);
-		function.exchange(clientRequest).block(ofMillis(0));
+		function.exchange(clientRequest).blockMillis(0);
 
 		ExchangeResult actual = wiretapConnector.claimRequest("1");
 		assertNotNull(actual);
diff --git a/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java
index e65fe48..bc7c71b 100644
--- a/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java
+++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java
@@ -17,7 +17,6 @@
 package org.springframework.test.web.reactive.server.samples;
 
 import java.net.URI;
-import java.time.Duration;
 import java.util.Arrays;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -41,9 +40,8 @@ import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-import static java.time.Duration.*;
 import static org.hamcrest.CoreMatchers.endsWith;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertThat;
 import static org.springframework.http.MediaType.TEXT_EVENT_STREAM;
 
 /**
@@ -117,8 +115,7 @@ public class ResponseEntityTests {
 	@Test
 	public void postEntity() throws Exception {
 		this.client.post().uri("/persons")
-				.body(Mono.just(new Person("John")), Person.class)
-				.exchange()
+				.exchange(Mono.just(new Person("John")), Person.class)
 				.expectStatus().isCreated()
 				.expectHeader().valueEquals("location", "/persons/John")
 				.expectBody().isEmpty();
@@ -150,7 +147,7 @@ public class ResponseEntityTests {
 
 		@GetMapping(produces = "text/event-stream")
 		Flux<Person> getPersonStream() {
-			return Flux.interval(ofMillis(100)).onBackpressureBuffer(10).map(index -> new Person("N" + index));
+			return Flux.intervalMillis(100).onBackpressureBuffer(10).map(index -> new Person("N" + index));
 		}
 
 		@PostMapping
diff --git a/spring-web/src/main/java/org/springframework/http/client/AbstractAsyncClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/AbstractAsyncClientHttpRequest.java
index 78b0eb2..e33a153 100644
--- a/spring-web/src/main/java/org/springframework/http/client/AbstractAsyncClientHttpRequest.java
+++ b/spring-web/src/main/java/org/springframework/http/client/AbstractAsyncClientHttpRequest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,9 +29,7 @@ import org.springframework.util.concurrent.ListenableFuture;
  *
  * @author Arjen Poutsma
  * @since 4.0
- * @deprecated as of Spring 5.0, in favor of {@link org.springframework.http.client.reactive.AbstractClientHttpRequest}
  */
-@Deprecated
 abstract class AbstractAsyncClientHttpRequest implements AsyncClientHttpRequest {
 
 	private final HttpHeaders headers = new HttpHeaders();
diff --git a/spring-web/src/main/java/org/springframework/http/client/AbstractBufferingAsyncClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/AbstractBufferingAsyncClientHttpRequest.java
index c5ec370..2bcbcdb 100644
--- a/spring-web/src/main/java/org/springframework/http/client/AbstractBufferingAsyncClientHttpRequest.java
+++ b/spring-web/src/main/java/org/springframework/http/client/AbstractBufferingAsyncClientHttpRequest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,9 +29,7 @@ import org.springframework.util.concurrent.ListenableFuture;
  *
  * @author Arjen Poutsma
  * @since 4.0
- * @deprecated as of Spring 5.0, with no direct replacement
  */
-@Deprecated
 abstract class AbstractBufferingAsyncClientHttpRequest extends AbstractAsyncClientHttpRequest {
 
 	private ByteArrayOutputStream bufferedOutput = new ByteArrayOutputStream(1024);
diff --git a/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequest.java
index c418fc9..9e2e32e 100644
--- a/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequest.java
+++ b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,9 +32,7 @@ import org.springframework.util.concurrent.ListenableFuture;
  * @author Arjen Poutsma
  * @since 4.0
  * @see AsyncClientHttpRequestFactory#createAsyncRequest
- * @deprecated as of Spring 5.0, in favor of {@link org.springframework.web.reactive.function.client.ClientRequest}
  */
-@Deprecated
 public interface AsyncClientHttpRequest extends HttpRequest, HttpOutputMessage {
 
 	/**
diff --git a/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestExecution.java b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestExecution.java
index 232df59..2f09014 100644
--- a/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestExecution.java
+++ b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestExecution.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,19 +31,17 @@ import org.springframework.util.concurrent.ListenableFuture;
  * @author Rossen Stoyanchev
  * @since 4.3
  * @see AsyncClientHttpRequestInterceptor
- * @deprecated as of Spring 5.0, in favor of {@link org.springframework.web.reactive.function.client.ExchangeFilterFunction}
  */
-@Deprecated
 public interface AsyncClientHttpRequestExecution {
 
-	/**
-	 * Resume the request execution by invoking the next interceptor in the chain
-	 * or executing the request to the remote service.
-	 * @param request the HTTP request, containing the HTTP method and headers
-	 * @param body the body of the request
-	 * @return a corresponding future handle
-	 * @throws IOException in case of I/O errors
-	 */
-	ListenableFuture<ClientHttpResponse> executeAsync(HttpRequest request, byte[] body) throws IOException;
+    /**
+     * Resume the request execution by invoking the next interceptor in the chain
+     * or executing the request to the remote service.
+     * @param request the HTTP request, containing the HTTP method and headers
+     * @param body the body of the request
+     * @return a corresponding future handle
+     * @throws IOException in case of I/O errors
+     */
+    ListenableFuture<ClientHttpResponse> executeAsync(HttpRequest request, byte[] body) throws IOException;
 
 }
diff --git a/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestFactory.java
index 7addd66..b482e3d 100644
--- a/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestFactory.java
+++ b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestFactory.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,9 +27,7 @@ import org.springframework.http.HttpMethod;
  *
  * @author Arjen Poutsma
  * @since 4.0
- * @deprecated as of Spring 5.0, in favor of {@link org.springframework.http.client.reactive.ClientHttpConnector}
  */
-@Deprecated
 public interface AsyncClientHttpRequestFactory {
 
 	/**
diff --git a/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestInterceptor.java b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestInterceptor.java
index 6b7a0cd..3fabe12 100644
--- a/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestInterceptor.java
+++ b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestInterceptor.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@ package org.springframework.http.client;
 import java.io.IOException;
 
 import org.springframework.http.HttpRequest;
+import org.springframework.http.client.support.InterceptingAsyncHttpAccessor;
 import org.springframework.util.concurrent.ListenableFuture;
 
 /**
@@ -35,10 +36,8 @@ import org.springframework.util.concurrent.ListenableFuture;
  * @author Rossen Stoyanchev
  * @since 4.3
  * @see org.springframework.web.client.AsyncRestTemplate
- * @see org.springframework.http.client.support.InterceptingAsyncHttpAccessor
- * @deprecated as of Spring 5.0, in favor of {@link org.springframework.web.reactive.function.client.ExchangeFilterFunction}
+ * @see InterceptingAsyncHttpAccessor
  */
-@Deprecated
 public interface AsyncClientHttpRequestInterceptor {
 
 	/**
diff --git a/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequest.java
index 1a41f63..aaa8e57 100644
--- a/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequest.java
+++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -49,9 +49,7 @@ import org.springframework.util.concurrent.SuccessCallback;
  * @author Arjen Poutsma
  * @since 4.0
  * @see HttpComponentsClientHttpRequestFactory#createRequest
- * @deprecated as of Spring 5.0, with no direct replacement
  */
-@Deprecated
 final class HttpComponentsAsyncClientHttpRequest extends AbstractBufferingAsyncClientHttpRequest {
 
 	private final HttpAsyncClient httpClient;
diff --git a/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequestFactory.java
index c7d9564..fa57fbd 100644
--- a/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequestFactory.java
+++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequestFactory.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2015 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -43,9 +43,7 @@ import org.springframework.util.Assert;
  * @author Stephane Nicoll
  * @since 4.0
  * @see HttpAsyncClient
- * @deprecated as of Spring 5.0, with no direct replacement
  */
-@Deprecated
 public class HttpComponentsAsyncClientHttpRequestFactory extends HttpComponentsClientHttpRequestFactory
 		implements AsyncClientHttpRequestFactory, InitializingBean {
 
diff --git a/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpResponse.java b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpResponse.java
index 78e4646..b8f5a6b 100644
--- a/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpResponse.java
+++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpResponse.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,9 +36,7 @@ import org.springframework.util.StreamUtils;
  * @author Arjen Poutsma
  * @since 4.0
  * @see HttpComponentsAsyncClientHttpRequest#executeAsync()
- * @deprecated as of Spring 5.0, with no direct replacement
  */
-@Deprecated
 final class HttpComponentsAsyncClientHttpResponse extends AbstractClientHttpResponse {
 
 	private final HttpResponse httpResponse;
diff --git a/spring-web/src/main/java/org/springframework/http/client/InterceptingAsyncClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/InterceptingAsyncClientHttpRequest.java
index e58b3ef..0b13181 100644
--- a/spring-web/src/main/java/org/springframework/http/client/InterceptingAsyncClientHttpRequest.java
+++ b/spring-web/src/main/java/org/springframework/http/client/InterceptingAsyncClientHttpRequest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2015 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,86 +34,84 @@ import org.springframework.util.concurrent.ListenableFuture;
  * @author Jakub Narloch
  * @author Rossen Stoyanchev
  * @see InterceptingAsyncClientHttpRequestFactory
- * @deprecated as of Spring 5.0, with no direct replacement
  */
-@Deprecated
 class InterceptingAsyncClientHttpRequest extends AbstractBufferingAsyncClientHttpRequest {
 
-	private AsyncClientHttpRequestFactory requestFactory;
+    private AsyncClientHttpRequestFactory requestFactory;
 
-	private List<AsyncClientHttpRequestInterceptor> interceptors;
+    private List<AsyncClientHttpRequestInterceptor> interceptors;
 
-	private URI uri;
+    private URI uri;
 
-	private HttpMethod httpMethod;
+    private HttpMethod httpMethod;
 
 
-	/**
-	 * Creates new instance of {@link InterceptingAsyncClientHttpRequest}.
-	 *
-	 * @param requestFactory the async request factory
-	 * @param interceptors   the list of interceptors
-	 * @param uri            the request URI
-	 * @param httpMethod     the HTTP method
-	 */
-	public InterceptingAsyncClientHttpRequest(AsyncClientHttpRequestFactory requestFactory,
-			List<AsyncClientHttpRequestInterceptor> interceptors, URI uri, HttpMethod httpMethod) {
+    /**
+     * Creates new instance of {@link InterceptingAsyncClientHttpRequest}.
+     *
+     * @param requestFactory the async request factory
+     * @param interceptors   the list of interceptors
+     * @param uri            the request URI
+     * @param httpMethod     the HTTP method
+     */
+    public InterceptingAsyncClientHttpRequest(AsyncClientHttpRequestFactory requestFactory,
+            List<AsyncClientHttpRequestInterceptor> interceptors, URI uri, HttpMethod httpMethod) {
 
-		this.requestFactory = requestFactory;
-		this.interceptors = interceptors;
-		this.uri = uri;
-		this.httpMethod = httpMethod;
-	}
+        this.requestFactory = requestFactory;
+        this.interceptors = interceptors;
+        this.uri = uri;
+        this.httpMethod = httpMethod;
+    }
 
 
-	@Override
-	protected ListenableFuture<ClientHttpResponse> executeInternal(HttpHeaders headers, byte[] body)
-			throws IOException {
+    @Override
+    protected ListenableFuture<ClientHttpResponse> executeInternal(HttpHeaders headers, byte[] body)
+            throws IOException {
 
-		return new AsyncRequestExecution().executeAsync(this, body);
-	}
+        return new AsyncRequestExecution().executeAsync(this, body);
+    }
 
-	@Override
-	public HttpMethod getMethod() {
-		return httpMethod;
-	}
+    @Override
+    public HttpMethod getMethod() {
+        return httpMethod;
+    }
 
-	@Override
-	public URI getURI() {
-		return uri;
-	}
+    @Override
+    public URI getURI() {
+        return uri;
+    }
 
 
-	private class AsyncRequestExecution implements AsyncClientHttpRequestExecution {
+    private class AsyncRequestExecution implements AsyncClientHttpRequestExecution {
 
-		private Iterator<AsyncClientHttpRequestInterceptor> iterator;
+        private Iterator<AsyncClientHttpRequestInterceptor> iterator;
 
-		public AsyncRequestExecution() {
-			this.iterator = interceptors.iterator();
-		}
+        public AsyncRequestExecution() {
+            this.iterator = interceptors.iterator();
+        }
 
-		@Override
-		public ListenableFuture<ClientHttpResponse> executeAsync(HttpRequest request, byte[] body)
-				throws IOException {
+        @Override
+        public ListenableFuture<ClientHttpResponse> executeAsync(HttpRequest request, byte[] body)
+                throws IOException {
 
-			if (this.iterator.hasNext()) {
-				AsyncClientHttpRequestInterceptor interceptor = this.iterator.next();
-				return interceptor.intercept(request, body, this);
-			}
-			else {
-				URI theUri = request.getURI();
-				HttpMethod theMethod = request.getMethod();
-				HttpHeaders theHeaders = request.getHeaders();
+            if (this.iterator.hasNext()) {
+                AsyncClientHttpRequestInterceptor interceptor = this.iterator.next();
+                return interceptor.intercept(request, body, this);
+            }
+            else {
+                URI theUri = request.getURI();
+                HttpMethod theMethod = request.getMethod();
+                HttpHeaders theHeaders = request.getHeaders();
 
-				AsyncClientHttpRequest delegate = requestFactory.createAsyncRequest(theUri, theMethod);
-				delegate.getHeaders().putAll(theHeaders);
-				if (body.length > 0) {
-					StreamUtils.copy(body, delegate.getBody());
-				}
+                AsyncClientHttpRequest delegate = requestFactory.createAsyncRequest(theUri, theMethod);
+                delegate.getHeaders().putAll(theHeaders);
+                if (body.length > 0) {
+                    StreamUtils.copy(body, delegate.getBody());
+                }
 
-				return delegate.executeAsync();
-			}
-		}
-	}
+                return delegate.executeAsync();
+            }
+        }
+    }
 
 }
diff --git a/spring-web/src/main/java/org/springframework/http/client/InterceptingAsyncClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/InterceptingAsyncClientHttpRequestFactory.java
index 4347767..b12e706 100644
--- a/spring-web/src/main/java/org/springframework/http/client/InterceptingAsyncClientHttpRequestFactory.java
+++ b/spring-web/src/main/java/org/springframework/http/client/InterceptingAsyncClientHttpRequestFactory.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,9 +29,7 @@ import org.springframework.http.HttpMethod;
  * @author Jakub Narloch
  * @since 4.3
  * @see InterceptingAsyncClientHttpRequest
- * @deprecated as of Spring 5.0, with no direct replacement
  */
-@Deprecated
 public class InterceptingAsyncClientHttpRequestFactory implements AsyncClientHttpRequestFactory {
 
 	private AsyncClientHttpRequestFactory delegate;
diff --git a/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java
index d48f5dd..b85e3ac 100644
--- a/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java
+++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java
@@ -50,9 +50,7 @@ import org.springframework.util.concurrent.SettableListenableFuture;
  * @author Rossen Stoyanchev
  * @author Brian Clozel
  * @since 4.1.2
- * @deprecated as of Spring 5.0, in favor of {@link org.springframework.http.client.reactive.ReactorClientHttpConnector}
  */
-@Deprecated
 class Netty4ClientHttpRequest extends AbstractAsyncClientHttpRequest implements ClientHttpRequest {
 
 	private final Bootstrap bootstrap;
diff --git a/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequestFactory.java
index 1850912..f5a059c 100644
--- a/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequestFactory.java
+++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequestFactory.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -56,9 +56,7 @@ import org.springframework.util.Assert;
  * @author Brian Clozel
  * @author Mark Paluch
  * @since 4.1.2
- * @deprecated as of Spring 5.0, in favor of {@link org.springframework.http.client.reactive.ReactorClientHttpConnector}
  */
-@Deprecated
 public class Netty4ClientHttpRequestFactory implements ClientHttpRequestFactory,
 		AsyncClientHttpRequestFactory, InitializingBean, DisposableBean {
 
diff --git a/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpResponse.java b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpResponse.java
index 8a795cc..e42259e 100644
--- a/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpResponse.java
+++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpResponse.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,9 +32,7 @@ import org.springframework.util.Assert;
  *
  * @author Arjen Poutsma
  * @since 4.1.2
- * @deprecated as of Spring 5.0, in favor of {@link org.springframework.http.client.reactive.ReactorClientHttpConnector}
  */
-@Deprecated
 class Netty4ClientHttpResponse extends AbstractClientHttpResponse {
 
 	private final ChannelHandlerContext context;
diff --git a/spring-web/src/main/java/org/springframework/http/client/OkHttp3AsyncClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/OkHttp3AsyncClientHttpRequest.java
index 7333d8b..06e1d06 100644
--- a/spring-web/src/main/java/org/springframework/http/client/OkHttp3AsyncClientHttpRequest.java
+++ b/spring-web/src/main/java/org/springframework/http/client/OkHttp3AsyncClientHttpRequest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,9 +39,7 @@ import org.springframework.util.concurrent.SettableListenableFuture;
  * @author Arjen Poutsma
  * @author Roy Clarkson
  * @since 4.3
- * @deprecated as of Spring 5.0, with no direct replacement
  */
-@Deprecated
 class OkHttp3AsyncClientHttpRequest extends AbstractBufferingAsyncClientHttpRequest {
 
 	private final OkHttpClient client;
diff --git a/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequestFactory.java
index 389b98e..b45d36e 100644
--- a/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequestFactory.java
+++ b/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequestFactory.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -42,7 +42,6 @@ import org.springframework.util.StringUtils;
  * @author Roy Clarkson
  * @since 4.3
  */
-@SuppressWarnings("deprecation")
 public class OkHttp3ClientHttpRequestFactory
 		implements ClientHttpRequestFactory, AsyncClientHttpRequestFactory, DisposableBean {
 
diff --git a/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingAsyncClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingAsyncClientHttpRequest.java
index e98a7a2..bd43996 100644
--- a/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingAsyncClientHttpRequest.java
+++ b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingAsyncClientHttpRequest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,9 +36,7 @@ import org.springframework.util.concurrent.ListenableFuture;
  * @author Arjen Poutsma
  * @since 3.0
  * @see org.springframework.http.client.SimpleClientHttpRequestFactory#createRequest
- * @deprecated as of Spring 5.0, with no direct replacement
  */
-@Deprecated
 final class SimpleBufferingAsyncClientHttpRequest extends AbstractBufferingAsyncClientHttpRequest {
 
 	private final HttpURLConnection connection;
diff --git a/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java
index 17bcd6c..aa36918 100644
--- a/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java
+++ b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java
@@ -36,7 +36,6 @@ import org.springframework.util.Assert;
  * @see java.net.HttpURLConnection
  * @see HttpComponentsClientHttpRequestFactory
  */
-@SuppressWarnings("deprecation")
 public class SimpleClientHttpRequestFactory implements ClientHttpRequestFactory, AsyncClientHttpRequestFactory {
 
 	private static final int DEFAULT_CHUNK_SIZE = 4096;
diff --git a/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingAsyncClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingAsyncClientHttpRequest.java
index f79f2cb..e3327d2 100644
--- a/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingAsyncClientHttpRequest.java
+++ b/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingAsyncClientHttpRequest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,9 +37,7 @@ import org.springframework.util.concurrent.ListenableFuture;
  * @author Arjen Poutsma
  * @since 3.0
  * @see org.springframework.http.client.SimpleClientHttpRequestFactory#createRequest
- * @deprecated as of Spring 5.0, with no direct replacement
  */
-@Deprecated
 final class SimpleStreamingAsyncClientHttpRequest extends AbstractAsyncClientHttpRequest {
 
 	private final HttpURLConnection connection;
diff --git a/spring-web/src/main/java/org/springframework/http/client/support/AsyncHttpAccessor.java b/spring-web/src/main/java/org/springframework/http/client/support/AsyncHttpAccessor.java
index 99a0b0e..0076213 100644
--- a/spring-web/src/main/java/org/springframework/http/client/support/AsyncHttpAccessor.java
+++ b/spring-web/src/main/java/org/springframework/http/client/support/AsyncHttpAccessor.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2013 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,12 +23,14 @@ import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
 import org.springframework.http.HttpMethod;
+import org.springframework.http.client.AsyncClientHttpRequest;
+import org.springframework.http.client.AsyncClientHttpRequestFactory;
 import org.springframework.util.Assert;
 
 /**
  * Base class for {@link org.springframework.web.client.AsyncRestTemplate}
  * and other HTTP accessing gateway helpers, defining common properties
- * such as the {@link org.springframework.http.client.AsyncClientHttpRequestFactory} to operate on.
+ * such as the {@link AsyncClientHttpRequestFactory} to operate on.
  *
  * <p>Not intended to be used directly. See
  * {@link org.springframework.web.client.AsyncRestTemplate}.
@@ -36,21 +38,19 @@ import org.springframework.util.Assert;
  * @author Arjen Poutsma
  * @since 4.0
  * @see org.springframework.web.client.AsyncRestTemplate
- * @deprecated as of Spring 5.0, with no direct replacement
  */
-@Deprecated
 public class AsyncHttpAccessor {
 
 	/** Logger available to subclasses. */
 	protected final Log logger = LogFactory.getLog(getClass());
 
-	private org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory;
+	private AsyncClientHttpRequestFactory asyncRequestFactory;
 
 	/**
 	 * Set the request factory that this accessor uses for obtaining {@link
 	 * org.springframework.http.client.ClientHttpRequest HttpRequests}.
 	 */
-	public void setAsyncRequestFactory(org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory) {
+	public void setAsyncRequestFactory(AsyncClientHttpRequestFactory asyncRequestFactory) {
 		Assert.notNull(asyncRequestFactory, "'asyncRequestFactory' must not be null");
 		this.asyncRequestFactory = asyncRequestFactory;
 	}
@@ -59,21 +59,21 @@ public class AsyncHttpAccessor {
 	 * Return the request factory that this accessor uses for obtaining {@link
 	 * org.springframework.http.client.ClientHttpRequest HttpRequests}.
 	 */
-	public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory() {
+	public AsyncClientHttpRequestFactory getAsyncRequestFactory() {
 		return this.asyncRequestFactory;
 	}
 
 	/**
-	 * Create a new {@link org.springframework.http.client.AsyncClientHttpRequest} via this template's
-	 * {@link org.springframework.http.client.AsyncClientHttpRequestFactory}.
+	 * Create a new {@link AsyncClientHttpRequest} via this template's {@link
+	 * AsyncClientHttpRequestFactory}.
 	 * @param url the URL to connect to
 	 * @param method the HTTP method to execute (GET, POST, etc.)
 	 * @return the created request
 	 * @throws IOException in case of I/O errors
 	 */
-	protected org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method)
+	protected AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method)
 			throws IOException {
-		org.springframework.http.client.AsyncClientHttpRequest request = getAsyncRequestFactory().createAsyncRequest(url, method);
+		AsyncClientHttpRequest request = getAsyncRequestFactory().createAsyncRequest(url, method);
 		if (logger.isDebugEnabled()) {
 			logger.debug("Created asynchronous " + method.name() + " request for \"" + url + "\"");
 		}
diff --git a/spring-web/src/main/java/org/springframework/http/client/support/InterceptingAsyncHttpAccessor.java b/spring-web/src/main/java/org/springframework/http/client/support/InterceptingAsyncHttpAccessor.java
index 6c570ef..c3c2236 100644
--- a/spring-web/src/main/java/org/springframework/http/client/support/InterceptingAsyncHttpAccessor.java
+++ b/spring-web/src/main/java/org/springframework/http/client/support/InterceptingAsyncHttpAccessor.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,6 +19,9 @@ package org.springframework.http.client.support;
 import java.util.ArrayList;
 import java.util.List;
 
+import org.springframework.http.client.AsyncClientHttpRequestFactory;
+import org.springframework.http.client.AsyncClientHttpRequestInterceptor;
+import org.springframework.http.client.InterceptingAsyncClientHttpRequestFactory;
 import org.springframework.util.CollectionUtils;
 
 /**
@@ -28,40 +31,38 @@ import org.springframework.util.CollectionUtils;
  * @author Jakub Narloch
  * @author Rossen Stoyanchev
  * @since 4.3
- * @deprecated as of Spring 5.0, with no direct replacement
  */
-@Deprecated
 public abstract class InterceptingAsyncHttpAccessor extends AsyncHttpAccessor {
 
-	private List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> interceptors =
+    private List<AsyncClientHttpRequestInterceptor> interceptors =
 			new ArrayList<>();
 
 
-	/**
-	 * Set the request interceptors that this accessor should use.
-	 * @param interceptors the list of interceptors
-	 */
-	public void setInterceptors(List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> interceptors) {
-		this.interceptors = interceptors;
-	}
+    /**
+     * Set the request interceptors that this accessor should use.
+     * @param interceptors the list of interceptors
+     */
+    public void setInterceptors(List<AsyncClientHttpRequestInterceptor> interceptors) {
+        this.interceptors = interceptors;
+    }
 
-	/**
-	 * Return the request interceptor that this accessor uses.
-	 */
-	public List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> getInterceptors() {
-		return this.interceptors;
-	}
+    /**
+     * Return the request interceptor that this accessor uses.
+     */
+    public List<AsyncClientHttpRequestInterceptor> getInterceptors() {
+        return this.interceptors;
+    }
 
 
-	@Override
-	public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory() {
-		org.springframework.http.client.AsyncClientHttpRequestFactory delegate = super.getAsyncRequestFactory();
-		if (!CollectionUtils.isEmpty(getInterceptors())) {
-			return new org.springframework.http.client.InterceptingAsyncClientHttpRequestFactory(delegate, getInterceptors());
-		}
-		else {
-			return delegate;
-		}
-	}
+    @Override
+    public AsyncClientHttpRequestFactory getAsyncRequestFactory() {
+        AsyncClientHttpRequestFactory delegate = super.getAsyncRequestFactory();
+        if (!CollectionUtils.isEmpty(getInterceptors())) {
+            return new InterceptingAsyncClientHttpRequestFactory(delegate, getInterceptors());
+        }
+        else {
+            return delegate;
+        }
+    }
 
 }
diff --git a/spring-web/src/main/java/org/springframework/http/codec/AbstractCodecConfigurer.java b/spring-web/src/main/java/org/springframework/http/codec/AbstractCodecConfigurer.java
index c5e4d3d..e6d9d09 100644
--- a/spring-web/src/main/java/org/springframework/http/codec/AbstractCodecConfigurer.java
+++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractCodecConfigurer.java
@@ -181,7 +181,7 @@ public abstract class AbstractCodecConfigurer {
 	/**
 	 * A registry and a factory for built-in HTTP message readers and writers.
 	 */
-	public abstract static class DefaultCodecConfigurer {
+	public static class DefaultCodecConfigurer {
 
 		private boolean suppressed = false;
 
@@ -280,9 +280,13 @@ public abstract class AbstractCodecConfigurer {
 		}
 
 
-		protected abstract void addStringReaderTextOnlyTo(List<HttpMessageReader<?>> result);
+		protected void addStringReaderTextOnlyTo(List<HttpMessageReader<?>> result) {
+			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.textPlainOnly(true)));
+		}
 
-		protected abstract void addStringReaderTo(List<HttpMessageReader<?>> result);
+		protected void addStringReaderTo(List<HttpMessageReader<?>> result) {
+			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes(true)));
+		}
 
 		protected void addStringWriterTextPlainOnlyTo(List<HttpMessageWriter<?>> result) {
 			addWriterTo(result, () -> new EncoderHttpMessageWriter<>(CharSequenceEncoder.textPlainOnly()));
diff --git a/spring-web/src/main/java/org/springframework/http/codec/ClientCodecConfigurer.java b/spring-web/src/main/java/org/springframework/http/codec/ClientCodecConfigurer.java
index 083e215..f224524 100644
--- a/spring-web/src/main/java/org/springframework/http/codec/ClientCodecConfigurer.java
+++ b/spring-web/src/main/java/org/springframework/http/codec/ClientCodecConfigurer.java
@@ -18,7 +18,6 @@ package org.springframework.http.codec;
 import java.util.List;
 
 import org.springframework.core.codec.Decoder;
-import org.springframework.core.codec.StringDecoder;
 import org.springframework.http.codec.json.Jackson2JsonDecoder;
 
 /**
@@ -80,14 +79,6 @@ public class ClientCodecConfigurer extends AbstractCodecConfigurer {
 
 		// Internal methods for building a list of default readers or writers...
 
-		protected void addStringReaderTextOnlyTo(List<HttpMessageReader<?>> result) {
-			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.textPlainOnly(false)));
-		}
-
-		protected void addStringReaderTo(List<HttpMessageReader<?>> result) {
-			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes(false)));
-		}
-
 		private void addServerSentEventReaderTo(List<HttpMessageReader<?>> result) {
 			addReaderTo(result, () -> findReader(ServerSentEventHttpMessageReader.class, () -> {
 				Decoder<?> decoder = null;
diff --git a/spring-web/src/main/java/org/springframework/http/codec/ServerCodecConfigurer.java b/spring-web/src/main/java/org/springframework/http/codec/ServerCodecConfigurer.java
index f0356d4..3302cf3 100644
--- a/spring-web/src/main/java/org/springframework/http/codec/ServerCodecConfigurer.java
+++ b/spring-web/src/main/java/org/springframework/http/codec/ServerCodecConfigurer.java
@@ -18,7 +18,6 @@ package org.springframework.http.codec;
 import java.util.List;
 
 import org.springframework.core.codec.Encoder;
-import org.springframework.core.codec.StringDecoder;
 import org.springframework.http.codec.json.Jackson2JsonEncoder;
 
 /**
@@ -79,14 +78,6 @@ public class ServerCodecConfigurer extends AbstractCodecConfigurer {
 
 		// Internal methods for building a list of default readers or writers...
 
-		protected void addStringReaderTextOnlyTo(List<HttpMessageReader<?>> result) {
-			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.textPlainOnly(true)));
-		}
-
-		protected void addStringReaderTo(List<HttpMessageReader<?>> result) {
-			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes(true)));
-		}
-
 		private void addServerSentEventWriterTo(List<HttpMessageWriter<?>> result) {
 			addWriterTo(result, () -> findWriter(ServerSentEventHttpMessageWriter.class, () -> {
 				Encoder<?> encoder = null;
diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java
index 00de5e1..4279715 100644
--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java
+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java
@@ -98,9 +98,7 @@ public abstract class AbstractListenerWriteFlushProcessor<T> implements Processo
 	 * Listeners can call this method to cancel further writing.
 	 */
 	protected void cancel() {
-		if (this.subscription != null) {
-			this.subscription.cancel();
-		}
+		this.subscription.cancel();
 	}
 
 
diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java
index 45b24f1..eb1bbcc 100644
--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java
+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java
@@ -111,9 +111,7 @@ public abstract class AbstractListenerWriteProcessor<T> implements Processor<T,
 	 * Listeners can call this method to cancel further writing.
 	 */
 	public void cancel() {
-		if (this.subscription != null) {
-			this.subscription.cancel();
-		}
+		this.subscription.cancel();
 	}
 
 
diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java
index ed01b85..5020038 100644
--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java
+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java
@@ -55,7 +55,6 @@ public class ChannelSendOperator<T> extends MonoSource<T, Void> {
 	}
 
 
-	@SuppressWarnings("deprecation")
 	private class WriteWithBarrier extends Operators.SubscriberAdapter<T, Void> implements Publisher<T> {
 
 		/**
diff --git a/spring-web/src/main/java/org/springframework/web/client/AsyncRequestCallback.java b/spring-web/src/main/java/org/springframework/web/client/AsyncRequestCallback.java
index dd878b4..5dae560 100644
--- a/spring-web/src/main/java/org/springframework/web/client/AsyncRequestCallback.java
+++ b/spring-web/src/main/java/org/springframework/web/client/AsyncRequestCallback.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,8 +18,10 @@ package org.springframework.web.client;
 
 import java.io.IOException;
 
+import org.springframework.http.client.AsyncClientHttpRequest;
+
 /**
- * Callback interface for code that operates on an {@link org.springframework.http.client.AsyncClientHttpRequest}. Allows
+ * Callback interface for code that operates on an {@link AsyncClientHttpRequest}. Allows
  * to manipulate the request headers, and write to the request body.
  *
  * <p>Used internally by the {@link AsyncRestTemplate}, but also useful for application code.
@@ -27,10 +29,8 @@ import java.io.IOException;
  * @author Arjen Poutsma
  * @see org.springframework.web.client.AsyncRestTemplate#execute
  * @since 4.0
- * @deprecated as of Spring 5.0, in favor of {@link org.springframework.web.reactive.function.client.ExchangeFilterFunction}
  */
 @FunctionalInterface
-@Deprecated
 public interface AsyncRequestCallback {
 
 	/**
@@ -40,6 +40,6 @@ public interface AsyncRequestCallback {
 	 * @param request the active HTTP request
 	 * @throws java.io.IOException in case of I/O errors
 	 */
-	void doWithRequest(org.springframework.http.client.AsyncClientHttpRequest request) throws IOException;
+	void doWithRequest(AsyncClientHttpRequest request) throws IOException;
 
 }
diff --git a/spring-web/src/main/java/org/springframework/web/client/AsyncRestOperations.java b/spring-web/src/main/java/org/springframework/web/client/AsyncRestOperations.java
index a4f77d6..19658f6 100644
--- a/spring-web/src/main/java/org/springframework/web/client/AsyncRestOperations.java
+++ b/spring-web/src/main/java/org/springframework/web/client/AsyncRestOperations.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,9 +37,7 @@ import org.springframework.util.concurrent.ListenableFuture;
  * @since 4.0
  * @see AsyncRestTemplate
  * @see RestOperations
- * @deprecated as of Spring 5.0, in favor of {@link org.springframework.web.reactive.function.client.WebClient}
  */
-@Deprecated
 public interface AsyncRestOperations {
 
 	/**
diff --git a/spring-web/src/main/java/org/springframework/web/client/AsyncRestTemplate.java b/spring-web/src/main/java/org/springframework/web/client/AsyncRestTemplate.java
index 212e023..a0ad553 100644
--- a/spring-web/src/main/java/org/springframework/web/client/AsyncRestTemplate.java
+++ b/spring-web/src/main/java/org/springframework/web/client/AsyncRestTemplate.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,10 +33,13 @@ import org.springframework.http.HttpEntity;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.ResponseEntity;
+import org.springframework.http.client.AsyncClientHttpRequest;
+import org.springframework.http.client.AsyncClientHttpRequestFactory;
 import org.springframework.http.client.ClientHttpRequest;
 import org.springframework.http.client.ClientHttpRequestFactory;
 import org.springframework.http.client.ClientHttpResponse;
 import org.springframework.http.client.SimpleClientHttpRequestFactory;
+import org.springframework.http.client.support.InterceptingAsyncHttpAccessor;
 import org.springframework.http.converter.HttpMessageConverter;
 import org.springframework.util.Assert;
 import org.springframework.util.concurrent.ListenableFuture;
@@ -56,17 +59,15 @@ import org.springframework.web.util.UriTemplateHandler;
  * <p><strong>Note:</strong> by default {@code AsyncRestTemplate} relies on
  * standard JDK facilities to establish HTTP connections. You can switch to use
  * a different HTTP library such as Apache HttpComponents, Netty, and OkHttp by
- * using a constructor accepting an {@link org.springframework.http.client.AsyncClientHttpRequestFactory}.
+ * using a constructor accepting an {@link AsyncClientHttpRequestFactory}.
  *
  * <p>For more information, please refer to the {@link RestTemplate} API documentation.
  *
  * @author Arjen Poutsma
  * @since 4.0
  * @see RestTemplate
- * @deprecated as of Spring 5.0, in favor of {@link org.springframework.web.reactive.function.client.WebClient}
  */
-@Deprecated
-public class AsyncRestTemplate extends org.springframework.http.client.support.InterceptingAsyncHttpAccessor implements AsyncRestOperations {
+public class AsyncRestTemplate extends InterceptingAsyncHttpAccessor implements AsyncRestOperations {
 
 	private final RestTemplate syncTemplate;
 
@@ -96,14 +97,14 @@ public class AsyncRestTemplate extends org.springframework.http.client.support.I
 
 	/**
 	 * Create a new instance of the {@code AsyncRestTemplate} using the given
-	 * {@link org.springframework.http.client.AsyncClientHttpRequestFactory}.
+	 * {@link AsyncClientHttpRequestFactory}.
 	 * <p>This constructor will cast the given asynchronous
 	 * {@code AsyncClientHttpRequestFactory} to a {@link ClientHttpRequestFactory}. Since
 	 * all implementations of {@code ClientHttpRequestFactory} provided in Spring also
 	 * implement {@code AsyncClientHttpRequestFactory}, this should not result in a
 	 * {@code ClassCastException}.
 	 */
-	public AsyncRestTemplate(org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory) {
+	public AsyncRestTemplate(AsyncClientHttpRequestFactory asyncRequestFactory) {
 		this(asyncRequestFactory, (ClientHttpRequestFactory) asyncRequestFactory);
 	}
 
@@ -114,18 +115,18 @@ public class AsyncRestTemplate extends org.springframework.http.client.support.I
 	 * @param syncRequestFactory the synchronous request factory
 	 */
 	public AsyncRestTemplate(
-			org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory, ClientHttpRequestFactory syncRequestFactory) {
+			AsyncClientHttpRequestFactory asyncRequestFactory, ClientHttpRequestFactory syncRequestFactory) {
 
 		this(asyncRequestFactory, new RestTemplate(syncRequestFactory));
 	}
 
 	/**
 	 * Create a new instance of the {@code AsyncRestTemplate} using the given
-	 * {@link org.springframework.http.client.AsyncClientHttpRequestFactory} and synchronous {@link RestTemplate}.
+	 * {@link AsyncClientHttpRequestFactory} and synchronous {@link RestTemplate}.
 	 * @param requestFactory the asynchronous request factory to use
 	 * @param restTemplate the synchronous template to use
 	 */
-	public AsyncRestTemplate(org.springframework.http.client.AsyncClientHttpRequestFactory requestFactory, RestTemplate restTemplate) {
+	public AsyncRestTemplate(AsyncClientHttpRequestFactory requestFactory, RestTemplate restTemplate) {
 		Assert.notNull(restTemplate, "RestTemplate must not be null");
 		this.syncTemplate = restTemplate;
 		setAsyncRequestFactory(requestFactory);
@@ -504,7 +505,7 @@ public class AsyncRestTemplate extends org.springframework.http.client.support.I
 		Assert.notNull(url, "'url' must not be null");
 		Assert.notNull(method, "'method' must not be null");
 		try {
-			org.springframework.http.client.AsyncClientHttpRequest request = createAsyncRequest(url, method);
+			AsyncClientHttpRequest request = createAsyncRequest(url, method);
 			if (requestCallback != null) {
 				requestCallback.doWithRequest(request);
 			}
@@ -646,7 +647,7 @@ public class AsyncRestTemplate extends org.springframework.http.client.support.I
 		}
 
 		@Override
-		public void doWithRequest(final org.springframework.http.client.AsyncClientHttpRequest request) throws IOException {
+		public void doWithRequest(final AsyncClientHttpRequest request) throws IOException {
 			if (this.adaptee != null) {
 				this.adaptee.doWithRequest(new ClientHttpRequest() {
 					@Override
diff --git a/spring-web/src/main/kotlin/org/springframework/web/client/RestOperationsExtensions.kt b/spring-web/src/main/kotlin/org/springframework/web/client/RestOperationsExtensions.kt
index e6a2dc3..c74be74 100644
--- a/spring-web/src/main/kotlin/org/springframework/web/client/RestOperationsExtensions.kt
+++ b/spring-web/src/main/kotlin/org/springframework/web/client/RestOperationsExtensions.kt
@@ -3,7 +3,6 @@ package org.springframework.web.client
 import org.springframework.http.HttpEntity
 import org.springframework.http.HttpMethod
 import org.springframework.http.RequestEntity
-import org.springframework.http.ResponseEntity
 import java.net.URI
 
 
@@ -15,7 +14,7 @@ import java.net.URI
  * @since 5.0
  */
 @Throws(RestClientException::class)
-inline fun <reified T: Any> RestOperations.getForObject(url: String, vararg uriVariables: Any): T =
+inline fun <reified T: Any> RestOperations.getForObject(url: String, vararg uriVariables: Any) =
 		getForObject(url, T::class.java, *uriVariables)
 
 /**
@@ -26,7 +25,7 @@ inline fun <reified T: Any> RestOperations.getForObject(url: String, vararg uriV
  * @since 5.0
  */
 @Throws(RestClientException::class)
-inline fun <reified T: Any> RestOperations.getForObject(url: String, uriVariables: Map<String, Any?>): T =
+inline fun <reified T: Any> RestOperations.getForObject(url: String, uriVariables: Map<String, Any?>) =
 		getForObject(url, T::class.java, uriVariables)
 
 /**
@@ -37,7 +36,7 @@ inline fun <reified T: Any> RestOperations.getForObject(url: String, uriVariable
  * @since 5.0
  */
 @Throws(RestClientException::class)
-inline fun <reified T: Any> RestOperations.getForObject(url: URI): T =
+inline fun <reified T: Any> RestOperations.getForObject(url: URI) =
 		getForObject(url, T::class.java)
 
 /**
@@ -48,7 +47,7 @@ inline fun <reified T: Any> RestOperations.getForObject(url: URI): T =
  * @since 5.0
  */
 @Throws(RestClientException::class)
-inline fun <reified T: Any> RestOperations.getForEntity(url: String, vararg uriVariables: Any): ResponseEntity<T> =
+inline fun <reified T: Any> RestOperations.getForEntity(url: String, vararg uriVariables: Any) =
 		getForEntity(url, T::class.java, *uriVariables)
 
 /**
@@ -59,7 +58,7 @@ inline fun <reified T: Any> RestOperations.getForEntity(url: String, vararg uriV
  * @since 5.0
  */
 @Throws(RestClientException::class)
-inline fun <reified T: Any> RestOperations.postForObject(url: String, request: Any, vararg uriVariables: Any): T =
+inline fun <reified T: Any> RestOperations.postForObject(url: String, request: Any, vararg uriVariables: Any) =
 		postForObject(url, request, T::class.java, *uriVariables)
 
 /**
@@ -70,7 +69,7 @@ inline fun <reified T: Any> RestOperations.postForObject(url: String, request: A
  * @since 5.0
  */
 @Throws(RestClientException::class)
-inline fun <reified T: Any> RestOperations.postForObject(url: String, request: Any, uriVariables: Map<String, *>): T =
+inline fun <reified T: Any> RestOperations.postForObject(url: String, request: Any, uriVariables: Map<String, *>) =
 		postForObject(url, request, T::class.java, uriVariables)
 
 /**
@@ -79,7 +78,7 @@ inline fun <reified T: Any> RestOperations.postForObject(url: String, request: A
  * @since 5.0
  */
 @Throws(RestClientException::class)
-inline fun <reified T: Any> RestOperations.postForObject(url: URI, request: Any): T =
+inline fun <reified T: Any> RestOperations.postForObject(url: URI, request: Any) =
 		postForObject(url, request, T::class.java)
 
 /**
@@ -90,7 +89,7 @@ inline fun <reified T: Any> RestOperations.postForObject(url: URI, request: Any)
  * @since 5.0
  */
 @Throws(RestClientException::class)
-inline fun <reified T: Any> RestOperations.postForEntity(url: String, request: Any, vararg uriVariables: Any): ResponseEntity<T> =
+inline fun <reified T: Any> RestOperations.postForEntity(url: String, request: Any, vararg uriVariables: Any) =
 		postForEntity(url, request, T::class.java, *uriVariables)
 
 /**
@@ -101,7 +100,7 @@ inline fun <reified T: Any> RestOperations.postForEntity(url: String, request: A
  * @since 5.0
  */
 @Throws(RestClientException::class)
-inline fun <reified T: Any> RestOperations.postForEntity(url: String, request: Any, uriVariables: Map<String, *>): ResponseEntity<T> =
+inline fun <reified T: Any> RestOperations.postForEntity(url: String, request: Any, uriVariables: Map<String, *>) =
 		postForEntity(url, request, T::class.java, uriVariables)
 
 /**
@@ -112,7 +111,7 @@ inline fun <reified T: Any> RestOperations.postForEntity(url: String, request: A
  * @since 5.0
  */
 @Throws(RestClientException::class)
-inline fun <reified T: Any> RestOperations.postForEntity(url: URI, request: Any): ResponseEntity<T> =
+inline fun <reified T: Any> RestOperations.postForEntity(url: URI, request: Any) =
 		postForEntity(url, request, T::class.java)
 
 /**
@@ -123,7 +122,7 @@ inline fun <reified T: Any> RestOperations.postForEntity(url: URI, request: Any)
  * @since 5.0
  */
 @Throws(RestClientException::class)
-inline fun <reified T: Any> RestOperations.exchange(url: String, method: HttpMethod, requestEntity: HttpEntity<*>, vararg uriVariables: Any): ResponseEntity<T> =
+inline fun <reified T: Any> RestOperations.exchange(url: String, method: HttpMethod, requestEntity: HttpEntity<*>, vararg uriVariables: Any) =
 		exchange(url, method, requestEntity, T::class.java, *uriVariables)
 
 /**
@@ -134,7 +133,7 @@ inline fun <reified T: Any> RestOperations.exchange(url: String, method: HttpMet
  * @since 5.0
  */
 @Throws(RestClientException::class)
-inline fun <reified T: Any> RestOperations.exchange(url: String, method: HttpMethod, requestEntity: HttpEntity<*>, uriVariables: Map<String, *>): ResponseEntity<T> =
+inline fun <reified T: Any> RestOperations.exchange(url: String, method: HttpMethod, requestEntity: HttpEntity<*>, uriVariables: Map<String, *>) =
 		exchange(url, method, requestEntity, T::class.java, uriVariables)
 
 /**
@@ -145,7 +144,7 @@ inline fun <reified T: Any> RestOperations.exchange(url: String, method: HttpMet
  * @since 5.0
  */
 @Throws(RestClientException::class)
-inline fun <reified T: Any> RestOperations.exchange(url: URI, method: HttpMethod, requestEntity: HttpEntity<*>): ResponseEntity<T> =
+inline fun <reified T: Any> RestOperations.exchange(url: URI, method: HttpMethod, requestEntity: HttpEntity<*>) =
 		exchange(url, method, requestEntity, T::class.java)
 
 /**
@@ -156,5 +155,5 @@ inline fun <reified T: Any> RestOperations.exchange(url: URI, method: HttpMethod
  * @since 5.0
  */
 @Throws(RestClientException::class)
-inline fun <reified T: Any> RestOperations.exchange(requestEntity: RequestEntity<*>): ResponseEntity<T> =
+inline fun <reified T: Any> RestOperations.exchange(requestEntity: RequestEntity<*>) =
 		exchange(requestEntity, T::class.java)
diff --git a/spring-web/src/test/java/org/springframework/http/client/AbstractAsyncHttpRequestFactoryTestCase.java b/spring-web/src/test/java/org/springframework/http/client/AbstractAsyncHttpRequestFactoryTestCase.java
index d848361..14f17f2 100644
--- a/spring-web/src/test/java/org/springframework/http/client/AbstractAsyncHttpRequestFactoryTestCase.java
+++ b/spring-web/src/test/java/org/springframework/http/client/AbstractAsyncHttpRequestFactoryTestCase.java
@@ -39,7 +39,6 @@ import org.springframework.util.StreamUtils;
 import org.springframework.util.concurrent.ListenableFuture;
 import org.springframework.util.concurrent.ListenableFutureCallback;
 
-@SuppressWarnings("deprecation")
 public abstract class AbstractAsyncHttpRequestFactoryTestCase extends AbstractMockWebServerTestCase {
 
 	protected AsyncClientHttpRequestFactory factory;
diff --git a/spring-web/src/test/java/org/springframework/http/client/BufferedSimpleAsyncHttpRequestFactoryTests.java b/spring-web/src/test/java/org/springframework/http/client/BufferedSimpleAsyncHttpRequestFactoryTests.java
index d9ada34..1b7d420 100644
--- a/spring-web/src/test/java/org/springframework/http/client/BufferedSimpleAsyncHttpRequestFactoryTests.java
+++ b/spring-web/src/test/java/org/springframework/http/client/BufferedSimpleAsyncHttpRequestFactoryTests.java
@@ -26,7 +26,6 @@ import org.springframework.http.HttpMethod;
 
 public class BufferedSimpleAsyncHttpRequestFactoryTests extends AbstractAsyncHttpRequestFactoryTestCase {
 
-	@SuppressWarnings("deprecation")
 	@Override
 	protected AsyncClientHttpRequestFactory createRequestFactory() {
 		SimpleClientHttpRequestFactory requestFactory = new SimpleClientHttpRequestFactory();
diff --git a/spring-web/src/test/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequestFactoryTests.java b/spring-web/src/test/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequestFactoryTests.java
index ec84914..d928f06 100644
--- a/spring-web/src/test/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequestFactoryTests.java
+++ b/spring-web/src/test/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequestFactoryTests.java
@@ -32,7 +32,6 @@ import static org.junit.Assert.*;
  * @author Arjen Poutsma
  * @author Stephane Nicoll
  */
-@SuppressWarnings("deprecation")
 public class HttpComponentsAsyncClientHttpRequestFactoryTests extends AbstractAsyncHttpRequestFactoryTestCase {
 
 	@Override
diff --git a/spring-web/src/test/java/org/springframework/http/client/Netty4AsyncClientHttpRequestFactoryTests.java b/spring-web/src/test/java/org/springframework/http/client/Netty4AsyncClientHttpRequestFactoryTests.java
index 32b7b88..a97f7b3 100644
--- a/spring-web/src/test/java/org/springframework/http/client/Netty4AsyncClientHttpRequestFactoryTests.java
+++ b/spring-web/src/test/java/org/springframework/http/client/Netty4AsyncClientHttpRequestFactoryTests.java
@@ -42,7 +42,6 @@ public class Netty4AsyncClientHttpRequestFactoryTests extends AbstractAsyncHttpR
 		eventLoopGroup.shutdownGracefully().sync();
 	}
 
-	@SuppressWarnings("deprecation")
 	@Override
 	protected AsyncClientHttpRequestFactory createRequestFactory() {
 		return new Netty4ClientHttpRequestFactory(eventLoopGroup);
diff --git a/spring-web/src/test/java/org/springframework/http/client/OkHttp3AsyncClientHttpRequestFactoryTests.java b/spring-web/src/test/java/org/springframework/http/client/OkHttp3AsyncClientHttpRequestFactoryTests.java
index 507e8a3..12e857e 100644
--- a/spring-web/src/test/java/org/springframework/http/client/OkHttp3AsyncClientHttpRequestFactoryTests.java
+++ b/spring-web/src/test/java/org/springframework/http/client/OkHttp3AsyncClientHttpRequestFactoryTests.java
@@ -25,7 +25,6 @@ import org.springframework.http.HttpMethod;
  */
 public class OkHttp3AsyncClientHttpRequestFactoryTests extends AbstractAsyncHttpRequestFactoryTestCase {
 
-	@SuppressWarnings("deprecation")
 	@Override
 	protected AsyncClientHttpRequestFactory createRequestFactory() {
 		return new OkHttp3ClientHttpRequestFactory();
diff --git a/spring-web/src/test/java/org/springframework/http/codec/ClientCodecConfigurerTests.java b/spring-web/src/test/java/org/springframework/http/codec/ClientCodecConfigurerTests.java
index a32a24b..ac13471 100644
--- a/spring-web/src/test/java/org/springframework/http/codec/ClientCodecConfigurerTests.java
+++ b/spring-web/src/test/java/org/springframework/http/codec/ClientCodecConfigurerTests.java
@@ -15,16 +15,11 @@
  */
 package org.springframework.http.codec;
 
-import java.nio.charset.StandardCharsets;
-import java.time.Duration;
-import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.junit.Test;
-import reactor.core.publisher.Flux;
 
-import org.springframework.core.ResolvableType;
 import org.springframework.core.codec.ByteArrayDecoder;
 import org.springframework.core.codec.ByteArrayEncoder;
 import org.springframework.core.codec.ByteBufferDecoder;
@@ -36,7 +31,6 @@ import org.springframework.core.codec.Decoder;
 import org.springframework.core.codec.Encoder;
 import org.springframework.core.codec.ResourceDecoder;
 import org.springframework.core.codec.StringDecoder;
-import org.springframework.core.io.buffer.DefaultDataBufferFactory;
 import org.springframework.http.MediaType;
 import org.springframework.http.codec.json.Jackson2JsonDecoder;
 import org.springframework.http.codec.json.Jackson2JsonEncoder;
@@ -118,17 +112,10 @@ public class ClientCodecConfigurerTests {
 		return ((EncoderHttpMessageWriter) writer).getEncoder();
 	}
 
-	@SuppressWarnings("unchecked")
 	private void assertStringDecoder(Decoder<?> decoder, boolean textOnly) {
 		assertEquals(StringDecoder.class, decoder.getClass());
 		assertTrue(decoder.canDecode(forClass(String.class), MimeTypeUtils.TEXT_PLAIN));
 		assertEquals(!textOnly, decoder.canDecode(forClass(String.class), MediaType.TEXT_EVENT_STREAM));
-
-		Flux<String> decoded = (Flux<String>) decoder.decode(
-				Flux.just(new DefaultDataBufferFactory().wrap("line1\nline2".getBytes(StandardCharsets.UTF_8))),
-				ResolvableType.forClass(String.class), MimeTypeUtils.TEXT_PLAIN, Collections.emptyMap());
-
-		assertEquals(Collections.singletonList("line1\nline2"), decoded.collectList().block(Duration.ZERO));
 	}
 
 	private void assertStringEncoder(Encoder<?> encoder, boolean textOnly) {
diff --git a/spring-web/src/test/java/org/springframework/http/codec/CodecConfigurerTests.java b/spring-web/src/test/java/org/springframework/http/codec/CodecConfigurerTests.java
index 8fae700..8c57c69 100644
--- a/spring-web/src/test/java/org/springframework/http/codec/CodecConfigurerTests.java
+++ b/spring-web/src/test/java/org/springframework/http/codec/CodecConfigurerTests.java
@@ -282,19 +282,7 @@ public class CodecConfigurerTests {
 	private static class TestCodecConfigurer extends AbstractCodecConfigurer {
 
 		private TestCodecConfigurer() {
-			super(new TestDefaultCodecConfigurer());
-		}
-
-
-		private static class TestDefaultCodecConfigurer extends DefaultCodecConfigurer {
-
-			protected void addStringReaderTextOnlyTo(List<HttpMessageReader<?>> result) {
-				addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.textPlainOnly(true)));
-			}
-
-			protected void addStringReaderTo(List<HttpMessageReader<?>> result) {
-				addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes(true)));
-			}
+			super(new DefaultCodecConfigurer());
 		}
 	}
 
diff --git a/spring-web/src/test/java/org/springframework/http/codec/ServerCodecConfigurerTests.java b/spring-web/src/test/java/org/springframework/http/codec/ServerCodecConfigurerTests.java
index 2f8f31f..d98853b 100644
--- a/spring-web/src/test/java/org/springframework/http/codec/ServerCodecConfigurerTests.java
+++ b/spring-web/src/test/java/org/springframework/http/codec/ServerCodecConfigurerTests.java
@@ -15,17 +15,11 @@
  */
 package org.springframework.http.codec;
 
-import java.nio.charset.StandardCharsets;
-import java.time.Duration;
-import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.junit.Test;
-import reactor.core.publisher.Flux;
 
-import org.springframework.core.ResolvableType;
 import org.springframework.core.codec.ByteArrayDecoder;
 import org.springframework.core.codec.ByteArrayEncoder;
 import org.springframework.core.codec.ByteBufferDecoder;
@@ -37,7 +31,6 @@ import org.springframework.core.codec.Decoder;
 import org.springframework.core.codec.Encoder;
 import org.springframework.core.codec.ResourceDecoder;
 import org.springframework.core.codec.StringDecoder;
-import org.springframework.core.io.buffer.DefaultDataBufferFactory;
 import org.springframework.http.MediaType;
 import org.springframework.http.codec.json.Jackson2JsonDecoder;
 import org.springframework.http.codec.json.Jackson2JsonEncoder;
@@ -119,17 +112,10 @@ public class ServerCodecConfigurerTests {
 		return ((EncoderHttpMessageWriter) writer).getEncoder();
 	}
 
-	@SuppressWarnings("unchecked")
 	private void assertStringDecoder(Decoder<?> decoder, boolean textOnly) {
 		assertEquals(StringDecoder.class, decoder.getClass());
 		assertTrue(decoder.canDecode(forClass(String.class), MimeTypeUtils.TEXT_PLAIN));
 		assertEquals(!textOnly, decoder.canDecode(forClass(String.class), MediaType.TEXT_EVENT_STREAM));
-
-		Flux<String> flux = (Flux<String>) decoder.decode(
-				Flux.just(new DefaultDataBufferFactory().wrap("line1\nline2".getBytes(StandardCharsets.UTF_8))),
-				ResolvableType.forClass(String.class), MimeTypeUtils.TEXT_PLAIN, Collections.emptyMap());
-
-		assertEquals(Arrays.asList("line1\n", "line2"), flux.collectList().block(Duration.ZERO));
 	}
 
 	private void assertStringEncoder(Encoder<?> encoder, boolean textOnly) {
diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/ReactorHttpServer.java b/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/ReactorHttpServer.java
index 4ef630f..30bde7a 100644
--- a/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/ReactorHttpServer.java
+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/ReactorHttpServer.java
@@ -18,6 +18,7 @@ package org.springframework.http.server.reactive.bootstrap;
 
 import java.util.concurrent.atomic.AtomicReference;
 
+import reactor.core.Loopback;
 import reactor.ipc.netty.NettyContext;
 
 import org.springframework.http.server.reactive.ReactorHttpHandlerAdapter;
@@ -25,7 +26,7 @@ import org.springframework.http.server.reactive.ReactorHttpHandlerAdapter;
 /**
  * @author Stephane Maldini
  */
-public class ReactorHttpServer extends AbstractHttpServer {
+public class ReactorHttpServer extends AbstractHttpServer implements Loopback {
 
 	private ReactorHttpHandlerAdapter reactorHandler;
 
@@ -45,6 +46,16 @@ public class ReactorHttpServer extends AbstractHttpServer {
 	}
 
 	@Override
+	public Object connectedInput() {
+		return this.reactorServer;
+	}
+
+	@Override
+	public Object connectedOutput() {
+		return this.reactorServer;
+	}
+
+	@Override
 	protected void startInternal() {
 		NettyContext nettyContext = this.reactorServer.newHandler(this.reactorHandler).block();
 		setPort(nettyContext.address().getPort());
diff --git a/spring-web/src/test/java/org/springframework/web/client/AsyncRestTemplateIntegrationTests.java b/spring-web/src/test/java/org/springframework/web/client/AsyncRestTemplateIntegrationTests.java
index 158a36e..c508c76 100644
--- a/spring-web/src/test/java/org/springframework/web/client/AsyncRestTemplateIntegrationTests.java
+++ b/spring-web/src/test/java/org/springframework/web/client/AsyncRestTemplateIntegrationTests.java
@@ -61,7 +61,6 @@ import static org.junit.Assert.fail;
  * @author Arjen Poutsma
  * @author Sebastien Deleuze
  */
-@SuppressWarnings("deprecation")
 public class AsyncRestTemplateIntegrationTests extends AbstractMockWebServerTestCase {
 
 	private final AsyncRestTemplate template = new AsyncRestTemplate(
diff --git a/spring-web/src/test/java/org/springframework/web/client/RestTemplateIntegrationTests.java b/spring-web/src/test/java/org/springframework/web/client/RestTemplateIntegrationTests.java
index d795429..11f4d0e 100644
--- a/spring-web/src/test/java/org/springframework/web/client/RestTemplateIntegrationTests.java
+++ b/spring-web/src/test/java/org/springframework/web/client/RestTemplateIntegrationTests.java
@@ -71,7 +71,6 @@ public class RestTemplateIntegrationTests extends AbstractMockWebServerTestCase
 	@Parameter
 	public ClientHttpRequestFactory clientHttpRequestFactory;
 
-	@SuppressWarnings("deprecation")
 	@Parameters
 	public static Iterable<? extends ClientHttpRequestFactory> data() {
 		return Arrays.asList(
diff --git a/spring-web/src/test/java/org/springframework/web/server/adapter/WebHttpHandlerBuilderTests.java b/spring-web/src/test/java/org/springframework/web/server/adapter/WebHttpHandlerBuilderTests.java
index 5ef26eb..68efd6e 100644
--- a/spring-web/src/test/java/org/springframework/web/server/adapter/WebHttpHandlerBuilderTests.java
+++ b/spring-web/src/test/java/org/springframework/web/server/adapter/WebHttpHandlerBuilderTests.java
@@ -36,7 +36,6 @@ import org.springframework.web.server.WebExceptionHandler;
 import org.springframework.web.server.WebFilter;
 import org.springframework.web.server.WebHandler;
 
-import static java.time.Duration.*;
 import static org.junit.Assert.*;
 
 /**
@@ -56,9 +55,9 @@ public class WebHttpHandlerBuilderTests {
 
 		MockServerHttpRequest request = MockServerHttpRequest.get("/").build();
 		MockServerHttpResponse response = new MockServerHttpResponse();
-		httpHandler.handle(request, response).block(ofMillis(5000));
+		httpHandler.handle(request, response).blockMillis(5000);
 
-		assertEquals("FilterB::FilterA", response.getBodyAsString().block(ofMillis(5000)));
+		assertEquals("FilterB::FilterA", response.getBodyAsString().blockMillis(5000));
 	}
 
 	@Test  // SPR-15074
@@ -71,9 +70,9 @@ public class WebHttpHandlerBuilderTests {
 
 		MockServerHttpRequest request = MockServerHttpRequest.get("/").build();
 		MockServerHttpResponse response = new MockServerHttpResponse();
-		httpHandler.handle(request, response).block(ofMillis(5000));
+		httpHandler.handle(request, response).blockMillis(5000);
 
-		assertEquals("ExceptionHandlerB", response.getBodyAsString().block(ofMillis(5000)));
+		assertEquals("ExceptionHandlerB", response.getBodyAsString().blockMillis(5000));
 	}
 
 	@Test
@@ -86,9 +85,9 @@ public class WebHttpHandlerBuilderTests {
 
 		MockServerHttpRequest request = MockServerHttpRequest.get("/").build();
 		MockServerHttpResponse response = new MockServerHttpResponse();
-		httpHandler.handle(request, response).block(ofMillis(5000));
+		httpHandler.handle(request, response).blockMillis(5000);
 
-		assertEquals("handled", response.getBodyAsString().block(ofMillis(5000)));
+		assertEquals("handled", response.getBodyAsString().blockMillis(5000));
 	}
 
 
diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.java b/spring-webflux/src/main/java/org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.java
index d5addc0..a986150 100644
--- a/spring-webflux/src/main/java/org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.java
+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.java
@@ -26,7 +26,7 @@ import org.springframework.util.CollectionUtils;
 import org.springframework.validation.MessageCodesResolver;
 import org.springframework.validation.Validator;
 import org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder;
-import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;
+import org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver;
 
 /**
  * A subclass of {@code WebFluxConfigurationSupport} that detects and delegates
@@ -70,8 +70,8 @@ public class DelegatingWebFluxConfiguration extends WebFluxConfigurationSupport
 	}
 
 	@Override
-	protected void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {
-		this.configurers.configureArgumentResolvers(configurer);
+	protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {
+		this.configurers.addArgumentResolvers(resolvers);
 	}
 
 	@Override
diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java
index 43f2e81..cee40b2 100644
--- a/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java
+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java
@@ -16,6 +16,7 @@
 
 package org.springframework.web.reactive.config;
 
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -49,7 +50,7 @@ import org.springframework.web.reactive.accept.CompositeContentTypeResolver;
 import org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder;
 import org.springframework.web.reactive.handler.AbstractHandlerMapping;
 import org.springframework.web.reactive.result.SimpleHandlerAdapter;
-import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;
+import org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver;
 import org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter;
 import org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping;
 import org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler;
@@ -235,13 +236,15 @@ public class WebFluxConfigurationSupport implements ApplicationContextAware {
 	@Bean
 	public RequestMappingHandlerAdapter requestMappingHandlerAdapter() {
 		RequestMappingHandlerAdapter adapter = createRequestMappingHandlerAdapter();
-		adapter.setMessageCodecConfigurer(getMessageCodecsConfigurer());
+		adapter.setMessageReaders(getMessageCodecsConfigurer().getReaders());
 		adapter.setWebBindingInitializer(getConfigurableWebBindingInitializer());
 		adapter.setReactiveAdapterRegistry(webFluxAdapterRegistry());
 
-		ArgumentResolverConfigurer configurer = new ArgumentResolverConfigurer();
-		configureArgumentResolvers(configurer);
-		adapter.setArgumentResolverConfigurer(configurer);
+		List<HandlerMethodArgumentResolver> resolvers = new ArrayList<>();
+		addArgumentResolvers(resolvers);
+		if (!resolvers.isEmpty()) {
+			adapter.setCustomArgumentResolvers(resolvers);
+		}
 
 		return adapter;
 	}
@@ -254,9 +257,9 @@ public class WebFluxConfigurationSupport implements ApplicationContextAware {
 	}
 
 	/**
-	 * Configure resolvers for custom controller method arguments.
+	 * Provide custom argument resolvers without overriding the built-in ones.
 	 */
-	protected void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {
+	protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {
 	}
 
 	/**
diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurer.java b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurer.java
index 392e843..1f51f69 100644
--- a/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurer.java
+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurer.java
@@ -29,7 +29,6 @@ import org.springframework.web.reactive.accept.CompositeContentTypeResolver;
 import org.springframework.web.reactive.accept.RequestedContentTypeResolver;
 import org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder;
 import org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver;
-import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;
 
 /**
  * Defines callback methods to customize the configuration for Web Reactive
@@ -81,10 +80,11 @@ public interface WebFluxConfigurer {
 	}
 
 	/**
-	 * Configure resolvers for custom controller method arguments.
-	 * @param configurer to configurer to use
+	 * Provide custom controller method argument resolvers. Such resolvers do
+	 * not override and will be invoked after the built-in ones.
+	 * @param resolvers a list of resolvers to add
 	 */
-	default void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {
+	default void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {
 	}
 
 	/**
diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurerComposite.java b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurerComposite.java
index b6a7271..bfb92ff 100644
--- a/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurerComposite.java
+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurerComposite.java
@@ -28,7 +28,7 @@ import org.springframework.util.CollectionUtils;
 import org.springframework.validation.MessageCodesResolver;
 import org.springframework.validation.Validator;
 import org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder;
-import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;
+import org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver;
 
 /**
  * A {@link WebFluxConfigurer} that delegates to one or more others.
@@ -70,8 +70,8 @@ public class WebFluxConfigurerComposite implements WebFluxConfigurer {
 	}
 
 	@Override
-	public void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {
-		this.delegates.forEach(delegate -> delegate.configureArgumentResolvers(configurer));
+	public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {
+		this.delegates.forEach(delegate -> delegate.addArgumentResolvers(resolvers));
 	}
 
 	@Override
diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java
index a64be45..0807129 100644
--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java
+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java
@@ -100,6 +100,7 @@ class DefaultClientResponse implements ClientResponse {
 		return bodyToPublisher(BodyExtractors.toFlux(elementClass), Flux::error);
 	}
 
+
 	private <T extends Publisher<?>> T bodyToPublisher(
 			BodyExtractor<T, ? super ClientHttpResponse> extractor,
 			Function<WebClientException, T> errorFunction) {
diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java
index ce43790..00922bc7 100644
--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java
+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java
@@ -22,24 +22,20 @@ import java.time.ZoneId;
 import java.time.ZonedDateTime;
 import java.time.format.DateTimeFormatter;
 import java.util.Arrays;
-import java.util.List;
 import java.util.Map;
 import java.util.function.Function;
 
 import org.reactivestreams.Publisher;
-import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.MediaType;
-import org.springframework.http.ResponseEntity;
 import org.springframework.http.client.reactive.ClientHttpRequest;
 import org.springframework.util.CollectionUtils;
 import org.springframework.util.LinkedMultiValueMap;
 import org.springframework.util.MultiValueMap;
 import org.springframework.web.reactive.function.BodyInserter;
-import org.springframework.web.reactive.function.BodyInserters;
 import org.springframework.web.util.DefaultUriBuilderFactory;
 import org.springframework.web.util.UriBuilder;
 import org.springframework.web.util.UriBuilderFactory;
@@ -74,48 +70,42 @@ class DefaultWebClient implements WebClient {
 
 
 	@Override
-	public UriSpec<RequestHeadersSpec<?>> get() {
-		return methodInternal(HttpMethod.GET);
+	public UriSpec get() {
+		return method(HttpMethod.GET);
 	}
 
 	@Override
-	public UriSpec<RequestHeadersSpec<?>> head() {
-		return methodInternal(HttpMethod.HEAD);
+	public UriSpec head() {
+		return method(HttpMethod.HEAD);
 	}
 
 	@Override
-	public UriSpec<RequestBodySpec> post() {
-		return methodInternal(HttpMethod.POST);
+	public UriSpec post() {
+		return method(HttpMethod.POST);
 	}
 
 	@Override
-	public UriSpec<RequestBodySpec> put() {
-		return methodInternal(HttpMethod.PUT);
+	public UriSpec put() {
+		return method(HttpMethod.PUT);
 	}
 
 	@Override
-	public UriSpec<RequestBodySpec> patch() {
-		return methodInternal(HttpMethod.PATCH);
+	public UriSpec patch() {
+		return method(HttpMethod.PATCH);
 	}
 
 	@Override
-	public UriSpec<RequestHeadersSpec<?>> delete() {
-		return methodInternal(HttpMethod.DELETE);
+	public UriSpec delete() {
+		return method(HttpMethod.DELETE);
 	}
 
 	@Override
-	public UriSpec<RequestHeadersSpec<?>> options() {
-		return methodInternal(HttpMethod.OPTIONS);
+	public UriSpec options() {
+		return method(HttpMethod.OPTIONS);
 	}
 
-	@Override
-	public UriSpec<RequestBodySpec> method(HttpMethod httpMethod) {
-		return methodInternal(httpMethod);
-	}
-
-	@SuppressWarnings("unchecked")
-	private <S extends RequestHeadersSpec<?>> UriSpec<S> methodInternal(HttpMethod httpMethod) {
-		return new DefaultUriSpec<>(httpMethod);
+	private UriSpec method(HttpMethod httpMethod) {
+		return new DefaultUriSpec(httpMethod);
 	}
 
 	@Override
@@ -126,7 +116,7 @@ class DefaultWebClient implements WebClient {
 	}
 
 
-	private class DefaultUriSpec<S extends RequestHeadersSpec<?>> implements UriSpec<S> {
+	private class DefaultUriSpec implements UriSpec {
 
 		private final HttpMethod httpMethod;
 
@@ -136,29 +126,28 @@ class DefaultWebClient implements WebClient {
 		}
 
 		@Override
-		public S uri(String uriTemplate, Object... uriVariables) {
+		public HeaderSpec uri(String uriTemplate, Object... uriVariables) {
 			return uri(uriBuilderFactory.expand(uriTemplate, uriVariables));
 		}
 
 		@Override
-		public S uri(String uriTemplate, Map<String, ?> uriVariables) {
+		public HeaderSpec uri(String uriTemplate, Map<String, ?> uriVariables) {
 			return uri(uriBuilderFactory.expand(uriTemplate, uriVariables));
 		}
 
 		@Override
-		public S uri(Function<UriBuilder, URI> uriFunction) {
+		public HeaderSpec uri(Function<UriBuilder, URI> uriFunction) {
 			return uri(uriFunction.apply(uriBuilderFactory.builder()));
 		}
 
 		@Override
-		@SuppressWarnings("unchecked")
-		public S uri(URI uri) {
-			return (S) new DefaultRequestBodySpec(this.httpMethod, uri);
+		public HeaderSpec uri(URI uri) {
+			return new DefaultHeaderSpec(this.httpMethod, uri);
 		}
 	}
 
 
-	private class DefaultRequestBodySpec implements RequestBodySpec {
+	private class DefaultHeaderSpec implements HeaderSpec {
 
 		private final HttpMethod httpMethod;
 
@@ -168,9 +157,7 @@ class DefaultWebClient implements WebClient {
 
 		private MultiValueMap<String, String> cookies;
 
-		private BodyInserter<?, ? super ClientHttpRequest> inserter;
-
-		DefaultRequestBodySpec(HttpMethod httpMethod, URI uri) {
+		DefaultHeaderSpec(HttpMethod httpMethod, URI uri) {
 			this.httpMethod = httpMethod;
 			this.uri = uri;
 		}
@@ -190,7 +177,7 @@ class DefaultWebClient implements WebClient {
 		}
 
 		@Override
-		public DefaultRequestBodySpec header(String headerName, String... headerValues) {
+		public DefaultHeaderSpec header(String headerName, String... headerValues) {
 			for (String headerValue : headerValues) {
 				getHeaders().add(headerName, headerValue);
 			}
@@ -198,7 +185,7 @@ class DefaultWebClient implements WebClient {
 		}
 
 		@Override
-		public DefaultRequestBodySpec headers(HttpHeaders headers) {
+		public DefaultHeaderSpec headers(HttpHeaders headers) {
 			if (headers != null) {
 				getHeaders().putAll(headers);
 			}
@@ -206,37 +193,37 @@ class DefaultWebClient implements WebClient {
 		}
 
 		@Override
-		public DefaultRequestBodySpec accept(MediaType... acceptableMediaTypes) {
+		public DefaultHeaderSpec accept(MediaType... acceptableMediaTypes) {
 			getHeaders().setAccept(Arrays.asList(acceptableMediaTypes));
 			return this;
 		}
 
 		@Override
-		public DefaultRequestBodySpec acceptCharset(Charset... acceptableCharsets) {
+		public DefaultHeaderSpec acceptCharset(Charset... acceptableCharsets) {
 			getHeaders().setAcceptCharset(Arrays.asList(acceptableCharsets));
 			return this;
 		}
 
 		@Override
-		public DefaultRequestBodySpec contentType(MediaType contentType) {
+		public DefaultHeaderSpec contentType(MediaType contentType) {
 			getHeaders().setContentType(contentType);
 			return this;
 		}
 
 		@Override
-		public DefaultRequestBodySpec contentLength(long contentLength) {
+		public DefaultHeaderSpec contentLength(long contentLength) {
 			getHeaders().setContentLength(contentLength);
 			return this;
 		}
 
 		@Override
-		public DefaultRequestBodySpec cookie(String name, String value) {
+		public DefaultHeaderSpec cookie(String name, String value) {
 			getCookies().add(name, value);
 			return this;
 		}
 
 		@Override
-		public DefaultRequestBodySpec cookies(MultiValueMap<String, String> cookies) {
+		public DefaultHeaderSpec cookies(MultiValueMap<String, String> cookies) {
 			if (cookies != null) {
 				getCookies().putAll(cookies);
 			}
@@ -244,7 +231,7 @@ class DefaultWebClient implements WebClient {
 		}
 
 		@Override
-		public DefaultRequestBodySpec ifModifiedSince(ZonedDateTime ifModifiedSince) {
+		public DefaultHeaderSpec ifModifiedSince(ZonedDateTime ifModifiedSince) {
 			ZonedDateTime gmt = ifModifiedSince.withZoneSameInstant(ZoneId.of("GMT"));
 			String headerValue = DateTimeFormatter.RFC_1123_DATE_TIME.format(gmt);
 			getHeaders().set(HttpHeaders.IF_MODIFIED_SINCE, headerValue);
@@ -252,36 +239,26 @@ class DefaultWebClient implements WebClient {
 		}
 
 		@Override
-		public DefaultRequestBodySpec ifNoneMatch(String... ifNoneMatches) {
+		public DefaultHeaderSpec ifNoneMatch(String... ifNoneMatches) {
 			getHeaders().setIfNoneMatch(Arrays.asList(ifNoneMatches));
 			return this;
 		}
 
 		@Override
-		public <T> RequestHeadersSpec<?> body(BodyInserter<T, ? super ClientHttpRequest> inserter) {
-			this.inserter = inserter;
-			return this;
-		}
-
-		@Override
-		public <T, S extends Publisher<T>> RequestHeadersSpec<?> body(S publisher, Class<T> elementClass) {
-			this.inserter = BodyInserters.fromPublisher(publisher, elementClass);
-			return this;
-		}
-
-		@Override
-		public <T> RequestHeadersSpec<?> body(T body) {
-			this.inserter = BodyInserters.fromObject(body);
-			return this;
-		}
-
-		@Override
 		public Mono<ClientResponse> exchange() {
+			ClientRequest request = this.initRequestBuilder().build();
+			return exchangeFunction.exchange(request);
+		}
 
-			ClientRequest request = this.inserter != null ?
-					initRequestBuilder().body(this.inserter).build() :
-					initRequestBuilder().build();
+		@Override
+		public <T> Mono<ClientResponse> exchange(BodyInserter<T, ? super ClientHttpRequest> inserter) {
+			ClientRequest request = this.initRequestBuilder().body(inserter).build();
+			return exchangeFunction.exchange(request);
+		}
 
+		@Override
+		public <T, S extends Publisher<T>> Mono<ClientResponse> exchange(S publisher, Class<T> elementClass) {
+			ClientRequest request = initRequestBuilder().headers(this.headers).body(publisher, elementClass).build();
 			return exchangeFunction.exchange(request);
 		}
 
@@ -328,50 +305,6 @@ class DefaultWebClient implements WebClient {
 				return result;
 			}
 		}
-
-		@Override
-		public ResponseSpec retrieve() {
-			return new DefaultResponseSpec(exchange());
-		}
 	}
 
-	private static class DefaultResponseSpec implements ResponseSpec {
-
-		private final Mono<ClientResponse> responseMono;
-
-
-		DefaultResponseSpec(Mono<ClientResponse> responseMono) {
-			this.responseMono = responseMono;
-		}
-
-		@Override
-		public <T> Mono<T> bodyToMono(Class<T> bodyType) {
-			return this.responseMono.then(clientResponse -> clientResponse.bodyToMono(bodyType));
-		}
-
-		@Override
-		public <T> Flux<T> bodyToFlux(Class<T> elementType) {
-			return this.responseMono.flatMap(clientResponse -> clientResponse.bodyToFlux(elementType));
-		}
-
-		@Override
-		public <T> Mono<ResponseEntity<T>> bodyToEntity(Class<T> bodyType) {
-			return this.responseMono.then(response ->
-					response.bodyToMono(bodyType).map(body -> {
-						HttpHeaders headers = response.headers().asHttpHeaders();
-						return new ResponseEntity<>(body, headers, response.statusCode());
-					})
-			);
-		}
-
-		@Override
-		public <T> Mono<ResponseEntity<List<T>>> bodyToEntityList(Class<T> responseType) {
-			return this.responseMono.then(response ->
-					response.bodyToFlux(responseType).collectList().map(body -> {
-						HttpHeaders headers = response.headers().asHttpHeaders();
-						return new ResponseEntity<>(body, headers, response.statusCode());
-					})
-			);
-		}
-	}
 }
diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java
index d9e486d..2d1b2e7 100644
--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java
+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java
@@ -19,18 +19,14 @@ package org.springframework.web.reactive.function.client;
 import java.net.URI;
 import java.nio.charset.Charset;
 import java.time.ZonedDateTime;
-import java.util.List;
 import java.util.Map;
 import java.util.function.Function;
 
 import org.reactivestreams.Publisher;
-import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 
 import org.springframework.http.HttpHeaders;
-import org.springframework.http.HttpMethod;
 import org.springframework.http.MediaType;
-import org.springframework.http.ResponseEntity;
 import org.springframework.http.client.reactive.ClientHttpConnector;
 import org.springframework.http.client.reactive.ClientHttpRequest;
 import org.springframework.util.MultiValueMap;
@@ -62,49 +58,43 @@ public interface WebClient {
 	 * Prepare an HTTP GET request.
 	 * @return a spec for specifying the target URL
 	 */
-	UriSpec<RequestHeadersSpec<?>> get();
+	UriSpec get();
 
 	/**
 	 * Prepare an HTTP HEAD request.
 	 * @return a spec for specifying the target URL
 	 */
-	UriSpec<RequestHeadersSpec<?>> head();
+	UriSpec head();
 
 	/**
 	 * Prepare an HTTP POST request.
 	 * @return a spec for specifying the target URL
 	 */
-	UriSpec<RequestBodySpec> post();
+	UriSpec post();
 
 	/**
 	 * Prepare an HTTP PUT request.
 	 * @return a spec for specifying the target URL
 	 */
-	UriSpec<RequestBodySpec> put();
+	UriSpec put();
 
 	/**
 	 * Prepare an HTTP PATCH request.
 	 * @return a spec for specifying the target URL
 	 */
-	UriSpec<RequestBodySpec> patch();
+	UriSpec patch();
 
 	/**
 	 * Prepare an HTTP DELETE request.
 	 * @return a spec for specifying the target URL
 	 */
-	UriSpec<RequestHeadersSpec<?>> delete();
+	UriSpec delete();
 
 	/**
 	 * Prepare an HTTP OPTIONS request.
 	 * @return a spec for specifying the target URL
 	 */
-	UriSpec<RequestHeadersSpec<?>> options();
-
-	/**
-	 * Prepare a request for the specified {@code HttpMethod}.
-	 * @return a spec for specifying the target URL
-	 */
-	UriSpec<RequestBodySpec> method(HttpMethod method);
+	UriSpec options();
 
 
 	/**
@@ -276,38 +266,38 @@ public interface WebClient {
 	/**
 	 * Contract for specifying the URI for a request.
 	 */
-	interface UriSpec<S extends RequestHeadersSpec<?>> {
+	interface UriSpec {
 
 		/**
 		 * Specify the URI using an absolute, fully constructed {@link URI}.
 		 */
-		S uri(URI uri);
+		HeaderSpec uri(URI uri);
 
 		/**
 		 * Specify the URI for the request using a URI template and URI variables.
 		 * If a {@link UriBuilderFactory} was configured for the client (e.g.
 		 * with a base URI) it will be used to expand the URI template.
 		 */
-		S uri(String uri, Object... uriVariables);
+		HeaderSpec uri(String uri, Object... uriVariables);
 
 		/**
 		 * Specify the URI for the request using a URI template and URI variables.
 		 * If a {@link UriBuilderFactory} was configured for the client (e.g.
 		 * with a base URI) it will be used to expand the URI template.
 		 */
-		S uri(String uri, Map<String, ?> uriVariables);
+		HeaderSpec uri(String uri, Map<String, ?> uriVariables);
 
 		/**
 		 * Build the URI for the request using the {@link UriBuilderFactory}
 		 * configured for this client.
 		 */
-		S uri(Function<UriBuilder, URI> uriFunction);
+		HeaderSpec uri(Function<UriBuilder, URI> uriFunction);
 	}
 
 	/**
 	 * Contract for specifying request headers leading up to the exchange.
 	 */
-	interface RequestHeadersSpec<S extends RequestHeadersSpec<S>> {
+	interface HeaderSpec {
 
 		/**
 		 * Set the list of acceptable {@linkplain MediaType media types}, as
@@ -315,7 +305,7 @@ public interface WebClient {
 		 * @param acceptableMediaTypes the acceptable media types
 		 * @return this builder
 		 */
-		S accept(MediaType... acceptableMediaTypes);
+		HeaderSpec accept(MediaType... acceptableMediaTypes);
 
 		/**
 		 * Set the list of acceptable {@linkplain Charset charsets}, as specified
@@ -323,7 +313,25 @@ public interface WebClient {
 		 * @param acceptableCharsets the acceptable charsets
 		 * @return this builder
 		 */
-		S acceptCharset(Charset... acceptableCharsets);
+		HeaderSpec acceptCharset(Charset... acceptableCharsets);
+
+		/**
+		 * Set the length of the body in bytes, as specified by the
+		 * {@code Content-Length} header.
+		 * @param contentLength the content length
+		 * @return this builder
+		 * @see HttpHeaders#setContentLength(long)
+		 */
+		HeaderSpec contentLength(long contentLength);
+
+		/**
+		 * Set the {@linkplain MediaType media type} of the body, as specified
+		 * by the {@code Content-Type} header.
+		 * @param contentType the content type
+		 * @return this builder
+		 * @see HttpHeaders#setContentType(MediaType)
+		 */
+		HeaderSpec contentType(MediaType contentType);
 
 		/**
 		 * Add a cookie with the given name and value.
@@ -331,14 +339,14 @@ public interface WebClient {
 		 * @param value the cookie value
 		 * @return this builder
 		 */
-		S cookie(String name, String value);
+		HeaderSpec cookie(String name, String value);
 
 		/**
 		 * Copy the given cookies into the entity's cookies map.
 		 * @param cookies the existing cookies to copy from
 		 * @return this builder
 		 */
-		S cookies(MultiValueMap<String, String> cookies);
+		HeaderSpec cookies(MultiValueMap<String, String> cookies);
 
 		/**
 		 * Set the value of the {@code If-Modified-Since} header.
@@ -347,14 +355,14 @@ public interface WebClient {
 		 * @param ifModifiedSince the new value of the header
 		 * @return this builder
 		 */
-		S ifModifiedSince(ZonedDateTime ifModifiedSince);
+		HeaderSpec ifModifiedSince(ZonedDateTime ifModifiedSince);
 
 		/**
 		 * Set the values of the {@code If-None-Match} header.
 		 * @param ifNoneMatches the new value of the header
 		 * @return this builder
 		 */
-		S ifNoneMatch(String... ifNoneMatches);
+		HeaderSpec ifNoneMatch(String... ifNoneMatches);
 
 		/**
 		 * Add the given, single header value under the given name.
@@ -362,162 +370,40 @@ public interface WebClient {
 		 * @param headerValues the header value(s)
 		 * @return this builder
 		 */
-		S header(String headerName, String... headerValues);
+		HeaderSpec header(String headerName, String... headerValues);
 
 		/**
 		 * Copy the given headers into the entity's headers map.
 		 * @param headers the existing headers to copy from
 		 * @return this builder
 		 */
-		S headers(HttpHeaders headers);
+		HeaderSpec headers(HttpHeaders headers);
 
 		/**
-		 * Exchange the request for a {@code ClientResponse} with full access
-		 * to the response status and headers before extracting the body.
-		 *
-		 * <p>Use {@link Mono#then(Function)} or {@link Mono#flatMap(Function)}
-		 * to compose further on the response:
-		 *
-		 * <pre>
-		 *	Mono&lt;Pojo&gt; mono = client.get().uri("/")
-		 *		.accept(MediaType.APPLICATION_JSON)
-		 *		.exchange()
-		 *		.then(response -> response.bodyToMono(Pojo.class));
-		 *
-		 *	Flux&lt;Pojo&gt; flux = client.get().uri("/")
-		 *		.accept(MediaType.APPLICATION_STREAM_JSON)
-		 *		.exchange()
-		 *		.then(response -> response.bodyToFlux(Pojo.class));
-		 * </pre>
-		 *
+		 * Perform the request without a request body.
 		 * @return a {@code Mono} with the response
 		 */
 		Mono<ClientResponse> exchange();
 
 		/**
-		 * A variant of {@link #exchange()} that provides the shortest path to
-		 * retrieving the full response (i.e. status, headers, and body) where
-		 * instead of returning {@code Mono<ClientResponse>} it exposes shortcut
-		 * methods to extract the response body.
-		 *
-		 * <p>Use of this method is simpler when you don't need to deal directly
-		 * with {@link ClientResponse}, e.g. to use a custom {@code BodyExtractor}
-		 * or to check the status and headers before extracting the response.
-		 *
-		 * <pre>
-		 *	Mono&lt;Pojo&gt; bodyMono = client.get().uri("/")
-		 *		.accept(MediaType.APPLICATION_JSON)
-		 *		.retrieve()
-		 *		.bodyToMono(Pojo.class);
-		 *
-		 *	Mono&lt;ResponseEntity&lt;Pojo&gt;&gt; entityMono = client.get().uri("/")
-		 *		.accept(MediaType.APPLICATION_JSON)
-		 *		.retrieve()
-		 *		.bodyToEntity(Pojo.class);
-		 * </pre>
-		 *
-		 * @return spec with options for extracting the response body
-		 */
-		ResponseSpec retrieve();
-
-	}
-
-	interface RequestBodySpec extends RequestHeadersSpec<RequestBodySpec> {
-
-		/**
-		 * Set the length of the body in bytes, as specified by the
-		 * {@code Content-Length} header.
-		 * @param contentLength the content length
-		 * @return this builder
-		 * @see HttpHeaders#setContentLength(long)
-		 */
-		RequestBodySpec contentLength(long contentLength);
-
-		/**
-		 * Set the {@linkplain MediaType media type} of the body, as specified
-		 * by the {@code Content-Type} header.
-		 * @param contentType the content type
-		 * @return this builder
-		 * @see HttpHeaders#setContentType(MediaType)
-		 */
-		RequestBodySpec contentType(MediaType contentType);
-
-		/**
-		 * Set the body of the request to the given {@code BodyInserter}.
+		 * Set the body of the request to the given {@code BodyInserter} and
+		 * perform the request.
 		 * @param inserter the {@code BodyInserter} that writes to the request
 		 * @param <T> the type contained in the body
-		 * @return this builder
+		 * @return a {@code Mono} with the response
 		 */
-		<T> RequestHeadersSpec<?> body(BodyInserter<T, ? super ClientHttpRequest> inserter);
+		<T> Mono<ClientResponse> exchange(BodyInserter<T, ? super ClientHttpRequest> inserter);
 
 		/**
-		 * Set the body of the request to the given {@code Publisher}.
-		 * <p>This method is a convenient shortcut for {@link #body(BodyInserter)} with a
-		 * {@linkplain org.springframework.web.reactive.function.BodyInserters#fromPublisher}
-		 * Publisher body inserter}.
+		 * Set the body of the request to the given {@code Publisher} and
+		 * perform the request.
 		 * @param publisher the {@code Publisher} to write to the request
 		 * @param elementClass the class of elements contained in the publisher
 		 * @param <T> the type of the elements contained in the publisher
 		 * @param <S> the type of the {@code Publisher}
-		 * @return this builder
+		 * @return a {@code Mono} with the response
 		 */
-		<T, S extends Publisher<T>> RequestHeadersSpec<?> body(S publisher, Class<T> elementClass);
-
-		/**
-		 * Set the body of the request to the given {@code Object}.
-		 * <p>This method is a convenient shortcut for {@link #body(BodyInserter)} with a
-		 * {@linkplain org.springframework.web.reactive.function.BodyInserters#fromObject
-		 * Object body inserter}.
-		 * @param body the {@code Object} to write to the request
-		 * @param <T> the type contained in the body
-		 * @return this builder
-		 */
-		<T> RequestHeadersSpec<?> body(T body);
-
-	}
-
-	interface ResponseSpec {
-
-		/**
-		 * Extract the response body to an Object of type {@code <T>} by
-		 * invoking {@link ClientResponse#bodyToMono(Class)}.
-		 *
-		 * @param bodyType the expected response body type
-		 * @param <T> response body type
-		 * @return {@code Mono} with the result
-		 */
-		<T> Mono<T> bodyToMono(Class<T> bodyType);
-
-		/**
-		 * Extract the response body to a stream of Objects of type {@code <T>}
-		 * by invoking {@link ClientResponse#bodyToFlux(Class)}.
-		 *
-		 * @param elementType the type of element in the response
-		 * @param <T> the type of elements in the response
-		 * @return the body of the response
-		 */
-		<T> Flux<T> bodyToFlux(Class<T> elementType);
-
-		/**
-		 * A variant of {@link #bodyToMono(Class)} that also provides access to
-		 * the response status and headers.
-		 *
-		 * @param bodyType the expected response body type
-		 * @param <T> response body type
-		 * @return {@code Mono} with the result
-		 */
-		<T> Mono<ResponseEntity<T>> bodyToEntity(Class<T> bodyType);
-
-		/**
-		 * A variant of {@link #bodyToFlux(Class)} collected via
-		 * {@link Flux#collectList()} and wrapped in {@code ResponseEntity}.
-		 *
-		 * @param elementType the expected response body list element type
-		 * @param <T> the type of elements in the list
-		 * @return {@code Mono} with the result
-		 */
-		<T> Mono<ResponseEntity<List<T>>> bodyToEntityList(Class<T> elementType);
-
+		<T, S extends Publisher<T>> Mono<ClientResponse> exchange(S publisher, Class<T> elementClass);
 	}
 
 }
diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ArgumentResolverConfigurer.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ArgumentResolverConfigurer.java
deleted file mode 100644
index d154291..0000000
--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ArgumentResolverConfigurer.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Copyright 2002-2017 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.web.reactive.result.method.annotation;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import org.springframework.util.Assert;
-import org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver;
-
-/**
- * Helps to configure resolvers for Controller method arguments.
- *
- * @author Rossen Stoyanchev
- * @since 5.0
- */
-public class ArgumentResolverConfigurer {
-
-	private final List<HandlerMethodArgumentResolver> customResolvers = new ArrayList<>(8);
-
-
-	/**
-	 * Configure resolvers for custom controller method arguments.
-	 * @param resolver the resolver(s) to add
-	 */
-	public void addCustomResolver(HandlerMethodArgumentResolver... resolver) {
-		Assert.notNull(resolver, "'resolvers' must not be null");
-		this.customResolvers.addAll(Arrays.asList(resolver));
-	}
-
-
-	List<HandlerMethodArgumentResolver> getCustomResolvers() {
-		return this.customResolvers;
-	}
-
-}
diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java
index 8a76199..13870f7 100644
--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java
+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java
@@ -37,7 +37,6 @@ import org.springframework.core.ReactiveAdapterRegistry;
 import org.springframework.core.annotation.AnnotationAwareOrderComparator;
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.http.codec.HttpMessageReader;
-import org.springframework.http.codec.ServerCodecConfigurer;
 import org.springframework.util.Assert;
 import org.springframework.util.ReflectionUtils;
 import org.springframework.web.bind.annotation.InitBinder;
@@ -96,37 +95,34 @@ class ControllerMethodResolver {
 			new LinkedHashMap<>(64);
 
 
-	ControllerMethodResolver(ArgumentResolverConfigurer argumentResolvers,
-			ServerCodecConfigurer messageCodecs, ReactiveAdapterRegistry reactiveRegistry,
-			ConfigurableApplicationContext context) {
+	ControllerMethodResolver(List<HandlerMethodArgumentResolver> customResolvers,
+			List<HttpMessageReader<?>> messageReaders, ReactiveAdapterRegistry reactiveRegistry,
+			ConfigurableApplicationContext applicationContext) {
 
-		Assert.notNull(argumentResolvers, "ArgumentResolverConfigurer is required");
-		Assert.notNull(messageCodecs, "ServerCodecConfigurer is required");
+		Assert.notNull(customResolvers, "'customResolvers' should not be null");
 		Assert.notNull(reactiveRegistry, "ReactiveAdapterRegistry is required");
-		Assert.notNull(context, "ApplicationContext is required");
+		Assert.notNull(applicationContext, "ConfigurableApplicationContext is required");
 
-		ArgumentResolverRegistrar registrar;
-
-		registrar= ArgumentResolverRegistrar.configurer(argumentResolvers).basic();
-		addResolversTo(registrar, reactiveRegistry, context);
+		ResolverRegistrar registrar = ResolverRegistrar.customResolvers(customResolvers).basic();
+		addResolversTo(registrar, reactiveRegistry, applicationContext);
 		this.initBinderResolvers = registrar.getSyncResolvers();
 
-		registrar = ArgumentResolverRegistrar.configurer(argumentResolvers).modelAttributeSupport();
-		addResolversTo(registrar, reactiveRegistry, context);
+		registrar = ResolverRegistrar.customResolvers(customResolvers).modelAttributeSupport();
+		addResolversTo(registrar, reactiveRegistry, applicationContext);
 		this.modelAttributeResolvers = registrar.getResolvers();
 
-		registrar = ArgumentResolverRegistrar.configurer(argumentResolvers).fullSupport(messageCodecs);
-		addResolversTo(registrar, reactiveRegistry, context);
+		registrar = ResolverRegistrar.customResolvers(customResolvers).fullSupport(messageReaders);
+		addResolversTo(registrar, reactiveRegistry, applicationContext);
 		this.requestMappingResolvers = registrar.getResolvers();
 
-		registrar = ArgumentResolverRegistrar.configurer(argumentResolvers).basic();
-		addResolversTo(registrar, reactiveRegistry, context);
+		registrar = ResolverRegistrar.customResolvers(customResolvers).basic();
+		addResolversTo(registrar, reactiveRegistry, applicationContext);
 		this.exceptionHandlerResolvers = registrar.getResolvers();
 
-		initControllerAdviceCaches(context);
+		initControllerAdviceCaches(applicationContext);
 	}
 
-	private void addResolversTo(ArgumentResolverRegistrar registrar,
+	private void addResolversTo(ResolverRegistrar registrar,
 			ReactiveAdapterRegistry reactiveRegistry, ConfigurableApplicationContext context) {
 
 		ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();
@@ -323,7 +319,7 @@ class ControllerMethodResolver {
 					(AnnotationUtils.findAnnotation(method, ModelAttribute.class) != null);
 
 
-	private static class ArgumentResolverRegistrar {
+	private static class ResolverRegistrar {
 
 		private final List<HandlerMethodArgumentResolver> customResolvers;
 
@@ -334,11 +330,11 @@ class ControllerMethodResolver {
 		private final List<HandlerMethodArgumentResolver> result = new ArrayList<>();
 
 
-		private ArgumentResolverRegistrar(ArgumentResolverConfigurer resolvers,
-				ServerCodecConfigurer codecs, boolean modelAttribute) {
+		private ResolverRegistrar(List<HandlerMethodArgumentResolver> customResolvers,
+				List<HttpMessageReader<?>> messageReaders, boolean modelAttribute) {
 
-			this.customResolvers = resolvers.getCustomResolvers();
-			this.messageReaders = codecs != null ? codecs.getReaders() : null;
+			this.customResolvers = new ArrayList<>(customResolvers);
+			this.messageReaders = messageReaders != null ? new ArrayList<>(messageReaders) : null;
 			this.modelAttributeSupported = modelAttribute;
 		}
 
@@ -376,31 +372,32 @@ class ControllerMethodResolver {
 		}
 
 
-		public static Builder configurer(ArgumentResolverConfigurer configurer) {
-			return new Builder(configurer);
+		public static Builder customResolvers(List<HandlerMethodArgumentResolver> customResolvers) {
+			return new Builder(customResolvers);
 		}
 
 
 		public static class Builder {
 
-			private final ArgumentResolverConfigurer resolvers;
+			private final List<HandlerMethodArgumentResolver> customResolvers;
 
 
-			public Builder(ArgumentResolverConfigurer configurer) {
-				this.resolvers = configurer;
+			public Builder(List<HandlerMethodArgumentResolver> customResolvers) {
+				this.customResolvers = new ArrayList<>(customResolvers);
 			}
 
 
-			public ArgumentResolverRegistrar fullSupport(ServerCodecConfigurer codecs) {
-				return new ArgumentResolverRegistrar(this.resolvers, codecs, true);
+			public ResolverRegistrar fullSupport(List<HttpMessageReader<?>> readers) {
+				Assert.notEmpty(readers, "No message readers");
+				return new ResolverRegistrar(this.customResolvers, readers, true);
 			}
 
-			public ArgumentResolverRegistrar modelAttributeSupport() {
-				return new ArgumentResolverRegistrar(this.resolvers, null, true);
+			public ResolverRegistrar modelAttributeSupport() {
+				return new ResolverRegistrar(this.customResolvers, null, true);
 			}
 
-			public ArgumentResolverRegistrar basic() {
-				return new ArgumentResolverRegistrar(this.resolvers, null, false);
+			public ResolverRegistrar basic() {
+				return new ResolverRegistrar(this.customResolvers, null, false);
 			}
 		}
 
diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java
index 5bc91d9..7b8a7ef 100644
--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java
+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java
@@ -16,6 +16,7 @@
 
 package org.springframework.web.reactive.result.method.annotation;
 
+import java.util.ArrayList;
 import java.util.List;
 import java.util.function.Function;
 
@@ -24,10 +25,18 @@ import org.apache.commons.logging.LogFactory;
 import reactor.core.publisher.Mono;
 
 import org.springframework.beans.factory.InitializingBean;
+import org.springframework.beans.factory.config.ConfigurableBeanFactory;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;
 import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.core.ReactiveAdapterRegistry;
+import org.springframework.core.codec.ByteArrayDecoder;
+import org.springframework.core.codec.ByteBufferDecoder;
+import org.springframework.core.codec.DataBufferDecoder;
+import org.springframework.core.codec.ResourceDecoder;
+import org.springframework.core.codec.StringDecoder;
+import org.springframework.http.codec.DecoderHttpMessageReader;
+import org.springframework.http.codec.HttpMessageReader;
 import org.springframework.http.codec.ServerCodecConfigurer;
 import org.springframework.util.Assert;
 import org.springframework.web.bind.support.WebBindingInitializer;
@@ -35,6 +44,7 @@ import org.springframework.web.method.HandlerMethod;
 import org.springframework.web.reactive.BindingContext;
 import org.springframework.web.reactive.HandlerAdapter;
 import org.springframework.web.reactive.HandlerResult;
+import org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver;
 import org.springframework.web.reactive.result.method.InvocableHandlerMethod;
 import org.springframework.web.server.ServerWebExchange;
 
@@ -49,13 +59,13 @@ public class RequestMappingHandlerAdapter implements HandlerAdapter, Application
 	private static final Log logger = LogFactory.getLog(RequestMappingHandlerAdapter.class);
 
 
-	private ServerCodecConfigurer messageCodecConfigurer;
+	private final List<HttpMessageReader<?>> messageReaders = new ArrayList<>(32);
 
 	private WebBindingInitializer webBindingInitializer;
 
-	private ArgumentResolverConfigurer argumentResolverConfigurer;
+	private ReactiveAdapterRegistry reactiveAdapterRegistry = new ReactiveAdapterRegistry();
 
-	private ReactiveAdapterRegistry reactiveAdapterRegistry;
+	private final List<HandlerMethodArgumentResolver> customArgumentResolvers = new ArrayList<>(8);
 
 	private ConfigurableApplicationContext applicationContext;
 
@@ -64,19 +74,32 @@ public class RequestMappingHandlerAdapter implements HandlerAdapter, Application
 	private ModelInitializer modelInitializer;
 
 
+	public RequestMappingHandlerAdapter() {
+		this.messageReaders.add(new DecoderHttpMessageReader<>(new ByteArrayDecoder()));
+		this.messageReaders.add(new DecoderHttpMessageReader<>(new ByteBufferDecoder()));
+		this.messageReaders.add(new DecoderHttpMessageReader<>(new DataBufferDecoder()));
+		this.messageReaders.add(new DecoderHttpMessageReader<>(new ResourceDecoder()));
+		this.messageReaders.add(new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes(true)));
+	}
+
+
 	/**
 	 * Configure HTTP message readers to de-serialize the request body with.
-	 * <p>By default this is set to {@link ServerCodecConfigurer} with defaults.
+	 * <p>By default only basic data types such as bytes and text are registered.
+	 * Consider using {@link ServerCodecConfigurer} to configure a richer list
+	 * including JSON encoding .
+	 * @see ServerCodecConfigurer
 	 */
-	public void setMessageCodecConfigurer(ServerCodecConfigurer configurer) {
-		this.messageCodecConfigurer = configurer;
+	public void setMessageReaders(List<HttpMessageReader<?>> messageReaders) {
+		this.messageReaders.clear();
+		this.messageReaders.addAll(messageReaders);
 	}
 
 	/**
-	 * Return the configurer for HTTP message readers.
+	 * Return the configured HTTP message readers.
 	 */
-	public ServerCodecConfigurer getMessageCodecConfigurer() {
-		return this.messageCodecConfigurer;
+	public List<HttpMessageReader<?>> getMessageReaders() {
+		return this.messageReaders;
 	}
 
 	/**
@@ -95,21 +118,6 @@ public class RequestMappingHandlerAdapter implements HandlerAdapter, Application
 	}
 
 	/**
-	 * Configure resolvers for controller method arguments.
-	 */
-	public void setArgumentResolverConfigurer(ArgumentResolverConfigurer configurer) {
-		Assert.notNull(configurer, "ArgumentResolverConfigurer is required");
-		this.argumentResolverConfigurer = configurer;
-	}
-
-	/**
-	 * Return the configured resolvers for controller method arguments.
-	 */
-	public ArgumentResolverConfigurer getArgumentResolverConfigurer() {
-		return this.argumentResolverConfigurer;
-	}
-
-	/**
 	 * Configure the registry for adapting various reactive types.
 	 * <p>By default this is an instance of {@link ReactiveAdapterRegistry} with
 	 * default settings.
@@ -126,6 +134,21 @@ public class RequestMappingHandlerAdapter implements HandlerAdapter, Application
 	}
 
 	/**
+	 * Configure resolvers for custom controller method arguments.
+	 */
+	public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {
+		this.customArgumentResolvers.clear();
+		this.customArgumentResolvers.addAll(resolvers);
+	}
+
+	/**
+	 * Return the configured custom argument resolvers.
+	 */
+	public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {
+		return this.customArgumentResolvers;
+	}
+
+	/**
 	 * A {@link ConfigurableApplicationContext} is expected for resolving
 	 * expressions in method argument default values as well as for
 	 * detecting {@code @ControllerAdvice} beans.
@@ -141,26 +164,18 @@ public class RequestMappingHandlerAdapter implements HandlerAdapter, Application
 		return this.applicationContext;
 	}
 
+	public ConfigurableBeanFactory getBeanFactory() {
+		return this.applicationContext.getBeanFactory();
+	}
+
 
 	@Override
 	public void afterPropertiesSet() throws Exception {
 
-		if (this.messageCodecConfigurer == null) {
-			this.messageCodecConfigurer = new ServerCodecConfigurer();
-		}
+		this.methodResolver = new ControllerMethodResolver(getCustomArgumentResolvers(),
+				getMessageReaders(), getReactiveAdapterRegistry(), getApplicationContext());
 
-		if (this.argumentResolverConfigurer == null) {
-			this.argumentResolverConfigurer = new ArgumentResolverConfigurer();
-		}
-
-		if (this.reactiveAdapterRegistry == null) {
-			this.reactiveAdapterRegistry = new ReactiveAdapterRegistry();
-		}
-
-		this.methodResolver = new ControllerMethodResolver(this.argumentResolverConfigurer,
-				this.messageCodecConfigurer, this.reactiveAdapterRegistry, this.applicationContext);
-
-		this.modelInitializer = new ModelInitializer(this.reactiveAdapterRegistry);
+		this.modelInitializer = new ModelInitializer(getReactiveAdapterRegistry());
 	}
 
 
diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java
index bb8b13d..c0440c7 100644
--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java
+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java
@@ -18,13 +18,13 @@ package org.springframework.web.reactive.result.view;
 
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.springframework.core.ReactiveAdapter;
-import org.springframework.core.ReactiveAdapterRegistry;
-import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 
 import org.springframework.context.ApplicationContext;
@@ -48,13 +48,9 @@ public abstract class AbstractView implements View, ApplicationContextAware {
 	/** Logger that is available to subclasses */
 	protected final Log logger = LogFactory.getLog(getClass());
 
-	private static final Object NO_VALUE = new Object();
-
 
 	private final List<MediaType> mediaTypes = new ArrayList<>(4);
 
-	private final ReactiveAdapterRegistry adapterRegistry;
-
 	private Charset defaultCharset = StandardCharsets.UTF_8;
 
 	private String requestContextAttribute;
@@ -63,12 +59,7 @@ public abstract class AbstractView implements View, ApplicationContextAware {
 
 
 	public AbstractView() {
-		this(new ReactiveAdapterRegistry());
-	}
-
-	public AbstractView(ReactiveAdapterRegistry registry) {
 		this.mediaTypes.add(ViewResolverSupport.DEFAULT_CONTENT_TYPE);
-		this.adapterRegistry = registry;
 	}
 
 
@@ -155,13 +146,14 @@ public abstract class AbstractView implements View, ApplicationContextAware {
 			exchange.getResponse().getHeaders().setContentType(contentType);
 		}
 
-		return getModelAttributes(model, exchange).then(mergedModel -> {
-			// Expose RequestContext?
-			if (this.requestContextAttribute != null) {
-				mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel));
-			}
-			return renderInternal(mergedModel, contentType, exchange);
-		});
+		Map<String, Object> mergedModel = getModelAttributes(model, exchange);
+
+		// Expose RequestContext?
+		if (this.requestContextAttribute != null) {
+			mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel));
+		}
+
+		return renderInternal(mergedModel, contentType, exchange);
 	}
 
 	/**
@@ -169,7 +161,7 @@ public abstract class AbstractView implements View, ApplicationContextAware {
 	 * <p>The default implementation creates a combined output Map that includes
 	 * model as well as static attributes with the former taking precedence.
 	 */
-	protected Mono<Map<String, Object>> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange) {
+	protected Map<String, Object> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange) {
 		int size = (model != null ? model.size() : 0);
 
 		Map<String, Object> attributes = new LinkedHashMap<>(size);
@@ -177,55 +169,7 @@ public abstract class AbstractView implements View, ApplicationContextAware {
 			attributes.putAll(model);
 		}
 
-		return resolveAsyncAttributes(attributes).then(Mono.just(attributes));
-	}
-
-	/**
-	 * By default, resolve async attributes supported by the {@link ReactiveAdapterRegistry} to their blocking counterparts.
-	 * <p>View implementations capable of taking advantage of reactive types can override this method if needed.
-	 * @return {@code Mono} to represent when the async attributes have been resolved
-	 */
-	protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {
-
-		List<String> names = new ArrayList<>();
-		List<Mono<?>> valueMonos = new ArrayList<>();
-
-		for (Map.Entry<String, ?> entry : model.entrySet()) {
-			Object value =  entry.getValue();
-			if (value == null) {
-				continue;
-			}
-			ReactiveAdapter adapter = this.adapterRegistry.getAdapter(null, value);
-			if (adapter != null) {
-				names.add(entry.getKey());
-				if (adapter.isMultiValue()) {
-					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value));
-					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()));
-				}
-				else {
-					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value));
-					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE));
-				}
-			}
-		}
-
-		if (names.isEmpty()) {
-			return Mono.empty();
-		}
-
-		return Mono.when(valueMonos,
-				values -> {
-					for (int i=0; i < values.length; i++) {
-						if (values[i] != NO_VALUE) {
-							model.put(names.get(i), values[i]);
-						}
-						else {
-							model.remove(names.get(i));
-						}
-					}
-					return NO_VALUE;
-				})
-				.then();
+		return attributes;
 	}
 
 	/**
diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java
index 31ea081..51d53be 100644
--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java
+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java
@@ -224,9 +224,10 @@ public class ViewResolutionResultHandler extends HandlerResultHandlerSupport
 						viewsMono = resolveViews(getDefaultViewName(exchange), locale);
 					}
 
-					addBindingResult(result.getBindingContext(), exchange);
-
-					return viewsMono.then(views -> render(views, model.asMap(), exchange));
+					return resolveAsyncAttributes(model.asMap())
+							.doOnSuccess(aVoid -> addBindingResult(result.getBindingContext(), exchange))
+							.then(viewsMono)
+							.then(views -> render(views, model.asMap(), exchange));
 				});
 	}
 
@@ -273,7 +274,44 @@ public class ViewResolutionResultHandler extends HandlerResultHandlerSupport
 		return ClassUtils.getShortNameAsProperty(returnValueType);
 	}
 
+	private Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {
 
+		List<String> names = new ArrayList<>();
+		List<Mono<?>> valueMonos = new ArrayList<>();
+
+		for (Map.Entry<String, ?> entry : model.entrySet()) {
+			ReactiveAdapter adapter = getAdapterRegistry().getAdapter(null, entry.getValue());
+			if (adapter != null) {
+				names.add(entry.getKey());
+				if (adapter.isMultiValue()) {
+					Flux<Object> value = Flux.from(adapter.toPublisher(entry.getValue()));
+					valueMonos.add(value.collectList().defaultIfEmpty(Collections.emptyList()));
+				}
+				else {
+					Mono<Object> value = Mono.from(adapter.toPublisher(entry.getValue()));
+					valueMonos.add(value.defaultIfEmpty(NO_VALUE));
+				}
+			}
+		}
+
+		if (names.isEmpty()) {
+			return Mono.empty();
+		}
+
+		return Mono.when(valueMonos,
+				values -> {
+					for (int i=0; i < values.length; i++) {
+						if (values[i] != NO_VALUE) {
+							model.put(names.get(i), values[i]);
+						}
+						else {
+							model.remove(names.get(i));
+						}
+					}
+					return NO_VALUE;
+				})
+				.then();
+	}
 
 	private void addBindingResult(BindingContext context, ServerWebExchange exchange) {
 		Map<String, Object> model = context.getModel().asMap();
diff --git a/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/BodyExtractorsExtensions.kt b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/BodyExtractorsExtensions.kt
index 8dc50e5..cc92004 100644
--- a/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/BodyExtractorsExtensions.kt
+++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/BodyExtractorsExtensions.kt
@@ -11,7 +11,7 @@ import kotlin.reflect.KClass
  * @author Sebastien Deleuze
  * @since 5.0
  */
-inline fun <reified T : Any> toMono(): BodyExtractor<Mono<T>, ReactiveHttpInputMessage> =
+inline fun <reified T : Any> toMono() : BodyExtractor<Mono<T>, ReactiveHttpInputMessage> =
 		BodyExtractors.toMono(T::class.java)
 
 /**
@@ -20,7 +20,7 @@ inline fun <reified T : Any> toMono(): BodyExtractor<Mono<T>, ReactiveHttpInputM
  * @author Sebastien Deleuze
  * @since 5.0
  */
-fun <T : Any> toMono(elementClass: KClass<T>): BodyExtractor<Mono<T>, ReactiveHttpInputMessage> =
+fun <T : Any> toMono(elementClass: KClass<T>) : BodyExtractor<Mono<T>, ReactiveHttpInputMessage> =
 		BodyExtractors.toMono(elementClass.java)
 
 /**
@@ -29,7 +29,7 @@ fun <T : Any> toMono(elementClass: KClass<T>): BodyExtractor<Mono<T>, ReactiveHt
  * @author Sebastien Deleuze
  * @since 5.0
  */
-inline fun <reified T : Any> toFlux(): BodyExtractor<Flux<T>, ReactiveHttpInputMessage> =
+inline fun <reified T : Any> toFlux() : BodyExtractor<Flux<T>, ReactiveHttpInputMessage> =
 		BodyExtractors.toFlux(T::class.java)
 
 /**
@@ -38,5 +38,5 @@ inline fun <reified T : Any> toFlux(): BodyExtractor<Flux<T>, ReactiveHttpInputM
  * @author Sebastien Deleuze
  * @since 5.0
  */
-fun <T : Any> toFlux(elementClass: KClass<T>): BodyExtractor<Flux<T>, ReactiveHttpInputMessage> =
+fun <T : Any> toFlux(elementClass: KClass<T>) : BodyExtractor<Flux<T>, ReactiveHttpInputMessage> =
 		BodyExtractors.toFlux(elementClass.java)
diff --git a/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/BodyInsertersExtensions.kt b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/BodyInsertersExtensions.kt
index 849d093..ac50aba 100644
--- a/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/BodyInsertersExtensions.kt
+++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/BodyInsertersExtensions.kt
@@ -10,7 +10,7 @@ import org.springframework.http.server.reactive.ServerHttpResponse
  * @author Sebastien Deleuze
  * @since 5.0
  */
-inline fun <reified T : Publisher<S>, reified S : Any> fromPublisher(publisher: T): BodyInserter<T, ReactiveHttpOutputMessage> =
+inline fun <reified T : Publisher<S>, reified S : Any> fromPublisher(publisher: T) : BodyInserter<T, ReactiveHttpOutputMessage> =
 		BodyInserters.fromPublisher(publisher, S::class.java)
 
 /**
@@ -19,5 +19,5 @@ inline fun <reified T : Publisher<S>, reified S : Any> fromPublisher(publisher:
  * @author Sebastien Deleuze
  * @since 5.0
  */
-inline fun <reified T : Publisher<S>, reified S : Any> fromServerSentEvents(publisher: T): BodyInserter<T, ServerHttpResponse> =
+inline fun <reified T : Publisher<S>, reified S : Any> fromServerSentEvents(publisher: T) : BodyInserter<T, ServerHttpResponse> =
 		BodyInserters.fromServerSentEvents(publisher, S::class.java)
diff --git a/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/client/ClientResponseExtensions.kt b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/client/ClientResponseExtensions.kt
index 91fdeb7..ae539d5 100644
--- a/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/client/ClientResponseExtensions.kt
+++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/client/ClientResponseExtensions.kt
@@ -11,7 +11,7 @@ import kotlin.reflect.KClass
  * @author Sebastien Deleuze
  * @since 5.0
  */
-fun <T : Any> ClientResponse.bodyToMono(type: KClass<T>): Mono<T> = bodyToMono(type.java)
+fun <T : Any> ClientResponse.bodyToMono(type: KClass<T>) : Mono<T> = bodyToMono(type.java)
 
 /**
  * Extension for [ClientResponse.bodyToMono] providing a `bodyToMono<Foo>()` variant.
@@ -19,7 +19,7 @@ fun <T : Any> ClientResponse.bodyToMono(type: KClass<T>): Mono<T> = bodyToMono(t
  * @author Sebastien Deleuze
  * @since 5.0
  */
-inline fun <reified T : Any> ClientResponse.bodyToMono(): Mono<T> = bodyToMono(T::class.java)
+inline fun <reified T : Any> ClientResponse.bodyToMono() = bodyToMono(T::class.java)
 
 
 /**
@@ -28,7 +28,7 @@ inline fun <reified T : Any> ClientResponse.bodyToMono(): Mono<T> = bodyToMono(T
  * @author Sebastien Deleuze
  * @since 5.0
  */
-fun <T : Any> ClientResponse.bodyToFlux(type: KClass<T>): Flux<T> = bodyToFlux(type.java)
+fun <T : Any> ClientResponse.bodyToFlux(type: KClass<T>) : Flux<T> = bodyToFlux(type.java)
 
 /**
  * Extension for [ClientResponse.bodyToFlux] providing a `bodyToFlux<Foo>()` variant.
@@ -36,4 +36,4 @@ fun <T : Any> ClientResponse.bodyToFlux(type: KClass<T>): Flux<T> = bodyToFlux(t
  * @author Sebastien Deleuze
  * @since 5.0
  */
-inline fun <reified T : Any> ClientResponse.bodyToFlux(): Flux<T> = bodyToFlux(T::class.java)
+inline fun <reified T : Any> ClientResponse.bodyToFlux() = bodyToFlux(T::class.java)
diff --git a/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/client/WebClientExtensions.kt b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/client/WebClientExtensions.kt
index 9059581..3018c60 100644
--- a/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/client/WebClientExtensions.kt
+++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/client/WebClientExtensions.kt
@@ -1,29 +1,13 @@
-/*
- * Copyright 2002-2017 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
 package org.springframework.web.reactive.function.client
 
 import org.reactivestreams.Publisher
 
 /**
- * Extension for [WebClient.RequestBodySpec.body] providing a variant without explicit class
+ * Extension for [WebClient.HeaderSpec.exchange] providing a variant without explicit class
  * parameter thanks to Kotlin reified type parameters.
  *
  * @author Sebastien Deleuze
  * @since 5.0
  */
-inline fun <reified T : Any, S : Publisher<T>> WebClient.RequestBodySpec.body(publisher: S): WebClient.RequestHeadersSpec<*>
-        = body(publisher, T::class.java)
+inline fun <reified T : Any, S : Publisher<T>> WebClient.HeaderSpec.exchange(publisher: S) =
+        exchange(publisher, T::class.java)
diff --git a/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionExtensions.kt b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionExtensions.kt
index 5cca535..6e48eb4 100644
--- a/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionExtensions.kt
+++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionExtensions.kt
@@ -19,7 +19,7 @@ package org.springframework.web.reactive.function.server
 import org.springframework.core.io.Resource
 import org.springframework.http.HttpMethod
 import org.springframework.http.MediaType
-import org.springframework.web.reactive.function.server.RequestPredicates.*
+import org.springframework.web.reactive.function.server.RequestPredicates.pathPrefix
 import reactor.core.publisher.Mono
 
 /**
@@ -96,92 +96,92 @@ class RouterDsl {
 		routes += RouterFunctions.route(RequestPredicates.GET(pattern), HandlerFunction { f(it) })
 	}
 
-	fun GET(pattern: String): RequestPredicate = RequestPredicates.GET(pattern)
+	fun GET(pattern: String) = RequestPredicates.GET(pattern)
 
 	fun HEAD(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {
 		routes += RouterFunctions.route(RequestPredicates.HEAD(pattern), HandlerFunction { f(it) })
 	}
 
-	fun HEAD(pattern: String): RequestPredicate = RequestPredicates.HEAD(pattern)
+	fun HEAD(pattern: String) = RequestPredicates.HEAD(pattern)
 
 	fun POST(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {
 		routes += RouterFunctions.route(RequestPredicates.POST(pattern), HandlerFunction { f(it) })
 	}
 
-	fun POST(pattern: String): RequestPredicate = RequestPredicates.POST(pattern)
+	fun POST(pattern: String) = RequestPredicates.POST(pattern)
 
 	fun PUT(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {
 		routes += RouterFunctions.route(RequestPredicates.PUT(pattern), HandlerFunction { f(it) })
 	}
 
-	fun PUT(pattern: String): RequestPredicate = RequestPredicates.PUT(pattern)
+	fun PUT(pattern: String) = RequestPredicates.PUT(pattern)
 
 	fun PATCH(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {
 		routes += RouterFunctions.route(RequestPredicates.PATCH(pattern), HandlerFunction { f(it) })
 	}
 
-	fun PATCH(pattern: String): RequestPredicate = RequestPredicates.PATCH(pattern)
+	fun PATCH(pattern: String) = RequestPredicates.PATCH(pattern)
 
 	fun DELETE(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {
 		routes += RouterFunctions.route(RequestPredicates.DELETE(pattern), HandlerFunction { f(it) })
 	}
 
-	fun DELETE(pattern: String): RequestPredicate = RequestPredicates.DELETE(pattern)
+	fun DELETE(pattern: String) = RequestPredicates.DELETE(pattern)
 
 
 	fun OPTIONS(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {
 		routes += RouterFunctions.route(RequestPredicates.OPTIONS(pattern), HandlerFunction { f(it) })
 	}
 
-	fun OPTIONS(pattern: String): RequestPredicate = RequestPredicates.OPTIONS(pattern)
+	fun OPTIONS(pattern: String) = RequestPredicates.OPTIONS(pattern)
 
 	fun accept(mediaType: MediaType, f: (ServerRequest) -> Mono<ServerResponse>) {
 		routes += RouterFunctions.route(RequestPredicates.accept(mediaType), HandlerFunction { f(it) })
 	}
 
-	fun accept(mediaType: MediaType): RequestPredicate = RequestPredicates.accept(mediaType)
+	fun accept(mediaType: MediaType) = RequestPredicates.accept(mediaType)
 
 	fun contentType(mediaType: MediaType, f: (ServerRequest) -> Mono<ServerResponse>) {
 		routes += RouterFunctions.route(RequestPredicates.contentType(mediaType), HandlerFunction { f(it) })
 	}
 
-	fun contentType(mediaType: MediaType): RequestPredicate = RequestPredicates.contentType(mediaType)
+	fun contentType(mediaType: MediaType) = RequestPredicates.contentType(mediaType)
 
 	fun headers(headerPredicate: (ServerRequest.Headers) -> Boolean, f: (ServerRequest) -> Mono<ServerResponse>) {
 		routes += RouterFunctions.route(RequestPredicates.headers(headerPredicate), HandlerFunction { f(it) })
 	}
 
-	fun headers(headerPredicate: (ServerRequest.Headers) -> Boolean): RequestPredicate = RequestPredicates.headers(headerPredicate)
+	fun headers(headerPredicate: (ServerRequest.Headers) -> Boolean) = RequestPredicates.headers(headerPredicate)
 
 	fun method(httpMethod: HttpMethod, f: (ServerRequest) -> Mono<ServerResponse>) {
 		routes += RouterFunctions.route(RequestPredicates.method(httpMethod), HandlerFunction { f(it) })
 	}
 
-	fun method(httpMethod: HttpMethod): RequestPredicate = RequestPredicates.method(httpMethod)
+	fun method(httpMethod: HttpMethod) = RequestPredicates.method(httpMethod)
 
 	fun path(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {
 		routes += RouterFunctions.route(RequestPredicates.path(pattern), HandlerFunction { f(it) })
 	}
 
-	fun path(pattern: String): RequestPredicate = RequestPredicates.path(pattern)
+	fun path(pattern: String) = RequestPredicates.path(pattern)
 
 	fun pathExtension(extension: String, f: (ServerRequest) -> Mono<ServerResponse>) {
 		routes += RouterFunctions.route(RequestPredicates.pathExtension(extension), HandlerFunction { f(it) })
 	}
 
-	fun pathExtension(extension: String): RequestPredicate = RequestPredicates.pathExtension(extension)
+	fun pathExtension(extension: String) = RequestPredicates.pathExtension(extension)
 
 	fun pathExtension(predicate: (String) -> Boolean, f: (ServerRequest) -> Mono<ServerResponse>) {
 		routes += RouterFunctions.route(RequestPredicates.pathExtension(predicate), HandlerFunction { f(it) })
 	}
 
-	fun pathExtension(predicate: (String) -> Boolean): RequestPredicate = RequestPredicates.pathExtension(predicate)
+	fun pathExtension(predicate: (String) -> Boolean) = RequestPredicates.pathExtension(predicate)
 
 	fun queryParam(name: String, predicate: (String) -> Boolean, f: (ServerRequest) -> Mono<ServerResponse>) {
 		routes += RouterFunctions.route(RequestPredicates.queryParam(name, predicate), HandlerFunction { f(it) })
 	}
 
-	fun queryParam(name: String, predicate: (String) -> Boolean): RequestPredicate = RequestPredicates.queryParam(name, predicate)
+	fun queryParam(name: String, predicate: (String) -> Boolean) = RequestPredicates.queryParam(name, predicate)
 
 	operator fun String.invoke(f: (ServerRequest) -> Mono<ServerResponse>) {
 		routes += RouterFunctions.route(RequestPredicates.path(this),  HandlerFunction { f(it) })
diff --git a/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/ServerRequestExtensions.kt b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/ServerRequestExtensions.kt
index 33ad080..dc76c67 100644
--- a/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/ServerRequestExtensions.kt
+++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/ServerRequestExtensions.kt
@@ -1,7 +1,5 @@
 package org.springframework.web.reactive.function.server
 
-import reactor.core.publisher.Flux
-import reactor.core.publisher.Mono
 import kotlin.reflect.KClass
 
 
@@ -11,7 +9,7 @@ import kotlin.reflect.KClass
  * @author Sebastien Deleuze
  * @since 5.0
  */
-fun <T : Any> ServerRequest.bodyToMono(type: KClass<T>): Mono<T> = bodyToMono(type.java)
+fun <T : Any> ServerRequest.bodyToMono(type: KClass<T>) = bodyToMono(type.java)
 
 /**
  * Extension for [ServerRequest.bodyToMono] providing a `bodyToMono<Foo>()` variant.
@@ -19,7 +17,7 @@ fun <T : Any> ServerRequest.bodyToMono(type: KClass<T>): Mono<T> = bodyToMono(ty
  * @author Sebastien Deleuze
  * @since 5.0
  */
-inline fun <reified T : Any> ServerRequest.bodyToMono(): Mono<T> = bodyToMono(T::class.java)
+inline fun <reified T : Any> ServerRequest.bodyToMono() = bodyToMono(T::class.java)
 
 /**
  * Extension for [ServerRequest.bodyToFlux] providing a [KClass] based variant.
@@ -27,7 +25,7 @@ inline fun <reified T : Any> ServerRequest.bodyToMono(): Mono<T> = bodyToMono(T:
  * @author Sebastien Deleuze
  * @since 5.0
  */
-fun <T : Any> ServerRequest.bodyToFlux(type: KClass<T>): Flux<T> = bodyToFlux(type.java)
+fun <T : Any> ServerRequest.bodyToFlux(type: KClass<T>) = bodyToFlux(type.java)
 
 /**
  * Extension for [ServerRequest.bodyToFlux] providing a `bodyToFlux<Foo>()` variant.
@@ -35,4 +33,4 @@ fun <T : Any> ServerRequest.bodyToFlux(type: KClass<T>): Flux<T> = bodyToFlux(ty
  * @author Sebastien Deleuze
  * @since 5.0
  */
-inline fun <reified T : Any> ServerRequest.bodyToFlux(): Flux<T> = bodyToFlux(T::class.java)
+inline fun <reified T : Any> ServerRequest.bodyToFlux() = bodyToFlux(T::class.java)
diff --git a/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/ServerResponseExtensions.kt b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/ServerResponseExtensions.kt
index 362d863..a11422c 100644
--- a/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/ServerResponseExtensions.kt
+++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/ServerResponseExtensions.kt
@@ -1,7 +1,6 @@
 package org.springframework.web.reactive.function.server
 
 import org.reactivestreams.Publisher
-import reactor.core.publisher.Mono
 
 /**
  * Extension for [ServerResponse.BodyBuilder.body] providing a `body(Publisher<T>)` variant.
@@ -9,4 +8,4 @@ import reactor.core.publisher.Mono
  * @author Sebastien Deleuze
  * @since 5.0
  */
-inline fun <reified T : Any> ServerResponse.BodyBuilder.body(publisher: Publisher<T>): Mono<ServerResponse> = body(publisher, T::class.java)
\ No newline at end of file
+inline fun <reified T : Any> ServerResponse.BodyBuilder.body(publisher: Publisher<T>) = body(publisher, T::class.java)
\ No newline at end of file
diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/config/DelegatingWebFluxConfigurationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/config/DelegatingWebFluxConfigurationTests.java
index 8b2ad17..b95cc46 100644
--- a/spring-webflux/src/test/java/org/springframework/web/reactive/config/DelegatingWebFluxConfigurationTests.java
+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/config/DelegatingWebFluxConfigurationTests.java
@@ -100,7 +100,7 @@ public class DelegatingWebFluxConfigurationTests {
 		verify(webFluxConfigurer).getValidator();
 		verify(webFluxConfigurer).getMessageCodesResolver();
 		verify(webFluxConfigurer).addFormatters(formatterRegistry.capture());
-		verify(webFluxConfigurer).configureArgumentResolvers(any());
+		verify(webFluxConfigurer).addArgumentResolvers(any());
 
 		assertSame(formatterRegistry.getValue(), initializerConversionService);
 		assertEquals(9, codecsConfigurer.getValue().getReaders().size());
diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/config/WebFluxConfigurationSupportTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/config/WebFluxConfigurationSupportTests.java
index 1165957..1701313 100644
--- a/spring-webflux/src/test/java/org/springframework/web/reactive/config/WebFluxConfigurationSupportTests.java
+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/config/WebFluxConfigurationSupportTests.java
@@ -68,14 +68,8 @@ import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
-import static org.springframework.core.ResolvableType.forClass;
-import static org.springframework.core.ResolvableType.forClassWithGenerics;
-import static org.springframework.http.MediaType.APPLICATION_FORM_URLENCODED;
-import static org.springframework.http.MediaType.APPLICATION_JSON;
-import static org.springframework.http.MediaType.APPLICATION_OCTET_STREAM;
-import static org.springframework.http.MediaType.APPLICATION_XML;
-import static org.springframework.http.MediaType.IMAGE_PNG;
-import static org.springframework.http.MediaType.TEXT_PLAIN;
+import static org.springframework.core.ResolvableType.*;
+import static org.springframework.http.MediaType.*;
 
 /**
  * Unit tests for {@link WebFluxConfigurationSupport}.
@@ -130,7 +124,7 @@ public class WebFluxConfigurationSupportTests {
 		RequestMappingHandlerAdapter adapter = context.getBean(name, RequestMappingHandlerAdapter.class);
 		assertNotNull(adapter);
 
-		List<HttpMessageReader<?>> readers = adapter.getMessageCodecConfigurer().getReaders();
+		List<HttpMessageReader<?>> readers = adapter.getMessageReaders();
 		assertEquals(9, readers.size());
 
 		assertHasMessageReader(readers, forClass(byte[].class), APPLICATION_OCTET_STREAM);
@@ -164,7 +158,7 @@ public class WebFluxConfigurationSupportTests {
 		RequestMappingHandlerAdapter adapter = context.getBean(name, RequestMappingHandlerAdapter.class);
 		assertNotNull(adapter);
 
-		List<HttpMessageReader<?>> messageReaders = adapter.getMessageCodecConfigurer().getReaders();
+		List<HttpMessageReader<?>> messageReaders = adapter.getMessageReaders();
 		assertEquals(2, messageReaders.size());
 
 		assertHasMessageReader(messageReaders, forClass(String.class), TEXT_PLAIN);
diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java
index 68d94b9..c3945a2 100644
--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java
+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java
@@ -17,8 +17,6 @@
 package org.springframework.web.reactive.function.client;
 
 import java.time.Duration;
-import java.util.Arrays;
-import java.util.List;
 
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
@@ -35,11 +33,10 @@ import reactor.test.StepVerifier;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.MediaType;
-import org.springframework.http.ResponseEntity;
 import org.springframework.http.codec.Pojo;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertThat;
+import static org.junit.Assert.*;
+import static org.springframework.web.reactive.function.BodyInserters.*;
 
 /**
  * Integration tests using a {@link ExchangeFunction} through {@link WebClient}.
@@ -137,109 +134,6 @@ public class WebClientIntegrationTests {
 	}
 
 	@Test
-	public void jsonStringRetrieveMono() throws Exception {
-		String content = "{\"bar\":\"barbar\",\"foo\":\"foofoo\"}";
-		this.server.enqueue(new MockResponse().setHeader("Content-Type", "application/json")
-				.setBody(content));
-
-		Mono<String> result = this.webClient.get()
-				.uri("/json")
-				.accept(MediaType.APPLICATION_JSON)
-				.retrieve()
-				.bodyToMono(String.class);
-
-		StepVerifier.create(result)
-				.expectNext(content)
-				.expectComplete()
-				.verify(Duration.ofSeconds(3));
-
-		RecordedRequest recordedRequest = server.takeRequest();
-		Assert.assertEquals(1, server.getRequestCount());
-		Assert.assertEquals("/json", recordedRequest.getPath());
-		Assert.assertEquals("application/json", recordedRequest.getHeader(HttpHeaders.ACCEPT));
-	}
-
-	@Test
-	public void jsonStringRetrieveEntity() throws Exception {
-		String content = "{\"bar\":\"barbar\",\"foo\":\"foofoo\"}";
-		this.server.enqueue(new MockResponse().setHeader("Content-Type", "application/json")
-				.setBody(content));
-
-		Mono<ResponseEntity<String>> result = this.webClient.get()
-				.uri("/json")
-				.accept(MediaType.APPLICATION_JSON)
-				.retrieve()
-				.bodyToEntity(String.class);
-
-		StepVerifier.create(result)
-				.consumeNextWith(entity -> {
-					assertEquals(HttpStatus.OK, entity.getStatusCode());
-					assertEquals(MediaType.APPLICATION_JSON, entity.getHeaders().getContentType());
-					assertEquals(31, entity.getHeaders().getContentLength());
-					assertEquals(content, entity.getBody());
-				})
-				.expectComplete()
-				.verify(Duration.ofSeconds(3));
-
-		RecordedRequest recordedRequest = server.takeRequest();
-		Assert.assertEquals(1, server.getRequestCount());
-		Assert.assertEquals("/json", recordedRequest.getPath());
-		Assert.assertEquals("application/json", recordedRequest.getHeader(HttpHeaders.ACCEPT));
-	}
-
-	@Test
-	public void jsonStringRetrieveEntityList() throws Exception {
-		String content = "[{\"bar\":\"bar1\",\"foo\":\"foo1\"}, {\"bar\":\"bar2\",\"foo\":\"foo2\"}]";
-		this.server.enqueue(new MockResponse().setHeader("Content-Type", "application/json").setBody(content));
-
-		Mono<ResponseEntity<List<Pojo>>> result = this.webClient.get()
-				.uri("/json")
-				.accept(MediaType.APPLICATION_JSON)
-				.retrieve()
-				.bodyToEntityList(Pojo.class);
-
-		StepVerifier.create(result)
-				.consumeNextWith(entity -> {
-					assertEquals(HttpStatus.OK, entity.getStatusCode());
-					assertEquals(MediaType.APPLICATION_JSON, entity.getHeaders().getContentType());
-					assertEquals(58, entity.getHeaders().getContentLength());
-					Pojo pojo1 = new Pojo("foo1", "bar1");
-					Pojo pojo2 = new Pojo("foo2", "bar2");
-					assertEquals(Arrays.asList(pojo1, pojo2), entity.getBody());
-				})
-				.expectComplete()
-				.verify(Duration.ofSeconds(3));
-
-		RecordedRequest recordedRequest = server.takeRequest();
-		Assert.assertEquals(1, server.getRequestCount());
-		Assert.assertEquals("/json", recordedRequest.getPath());
-		Assert.assertEquals("application/json", recordedRequest.getHeader(HttpHeaders.ACCEPT));
-	}
-
-	@Test
-	public void jsonStringRetrieveFlux() throws Exception {
-		String content = "{\"bar\":\"barbar\",\"foo\":\"foofoo\"}";
-		this.server.enqueue(new MockResponse().setHeader("Content-Type", "application/json")
-				.setBody(content));
-
-		Flux<String> result = this.webClient.get()
-				.uri("/json")
-				.accept(MediaType.APPLICATION_JSON)
-				.retrieve()
-				.bodyToFlux(String.class);
-
-		StepVerifier.create(result)
-				.expectNext(content)
-				.expectComplete()
-				.verify(Duration.ofSeconds(3));
-
-		RecordedRequest recordedRequest = server.takeRequest();
-		Assert.assertEquals(1, server.getRequestCount());
-		Assert.assertEquals("/json", recordedRequest.getPath());
-		Assert.assertEquals("application/json", recordedRequest.getHeader(HttpHeaders.ACCEPT));
-	}
-
-	@Test
 	public void jsonPojoMono() throws Exception {
 		this.server.enqueue(new MockResponse().setHeader("Content-Type", "application/json")
 				.setBody("{\"bar\":\"barbar\",\"foo\":\"foofoo\"}"));
@@ -294,8 +188,7 @@ public class WebClientIntegrationTests {
 				.uri("/pojo/capitalize")
 				.accept(MediaType.APPLICATION_JSON)
 				.contentType(MediaType.APPLICATION_JSON)
-				.body(new Pojo("foofoo", "barbar"))
-				.exchange()
+				.exchange(fromObject(new Pojo("foofoo", "barbar")))
 				.then(response -> response.bodyToMono(Pojo.class));
 
 		StepVerifier.create(result)
diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolverTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolverTests.java
index 006b3f6..8880579 100644
--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolverTests.java
+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolverTests.java
@@ -17,6 +17,7 @@ package org.springframework.web.reactive.result.method.annotation;
 
 
 import java.lang.reflect.Method;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -31,7 +32,8 @@ import org.springframework.core.ReactiveAdapterRegistry;
 import org.springframework.core.codec.ByteArrayDecoder;
 import org.springframework.core.codec.ByteBufferDecoder;
 import org.springframework.http.HttpStatus;
-import org.springframework.http.codec.ServerCodecConfigurer;
+import org.springframework.http.codec.DecoderHttpMessageReader;
+import org.springframework.http.codec.HttpMessageReader;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.ControllerAdvice;
 import org.springframework.web.bind.annotation.ExceptionHandler;
@@ -65,20 +67,19 @@ public class ControllerMethodResolverTests {
 	@Before
 	public void setUp() throws Exception {
 
-		ArgumentResolverConfigurer resolvers = new ArgumentResolverConfigurer();
-		resolvers.addCustomResolver(new CustomArgumentResolver());
-		resolvers.addCustomResolver(new CustomSyncArgumentResolver());
+		List<HandlerMethodArgumentResolver> customResolvers =
+				Arrays.asList(new CustomArgumentResolver(), new CustomSyncArgumentResolver());
 
-		ServerCodecConfigurer codecs = new ServerCodecConfigurer();
-		codecs.customCodec().decoder(new ByteArrayDecoder());
-		codecs.customCodec().decoder(new ByteBufferDecoder());
+		List<HttpMessageReader<?>> messageReaders = Arrays.asList(
+				new DecoderHttpMessageReader<>(new ByteArrayDecoder()),
+				new DecoderHttpMessageReader<>(new ByteBufferDecoder()));
 
 		AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext();
 		applicationContext.registerBean(TestControllerAdvice.class);
 		applicationContext.refresh();
 
 		this.methodResolver = new ControllerMethodResolver(
-				resolvers, codecs, new ReactiveAdapterRegistry(), applicationContext);
+				customResolvers, messageReaders, new ReactiveAdapterRegistry(), applicationContext);
 
 		Method method = ResolvableMethod.on(TestController.class).mockCall(TestController::handle).method();
 		this.handlerMethod = new HandlerMethod(new TestController(), method);
diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/AbstractViewTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/AbstractViewTests.java
deleted file mode 100644
index a825f31..0000000
--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/AbstractViewTests.java
+++ /dev/null
@@ -1,77 +0,0 @@
-package org.springframework.web.reactive.result.view;
-
-import io.reactivex.Observable;
-import io.reactivex.Single;
-import org.junit.Before;
-import org.junit.Test;
-import org.springframework.http.MediaType;
-import org.springframework.mock.http.server.reactive.test.MockServerHttpRequest;
-import org.springframework.mock.http.server.reactive.test.MockServerWebExchange;
-import org.springframework.tests.sample.beans.TestBean;
-import org.springframework.ui.Model;
-import org.springframework.web.server.ServerWebExchange;
-import reactor.core.publisher.Flux;
-import reactor.core.publisher.Mono;
-import reactor.test.StepVerifier;
-
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.logging.Level;
-
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-/**
- * Unit tests for {@link AbstractView}.
- *
- * @author Sebastien Deleuze
- */
-public class AbstractViewTests {
-
-    private MockServerWebExchange exchange;
-
-    @Before
-    public void setup() {
-        this.exchange = MockServerHttpRequest.get("/").toExchange();
-    }
-
-    @Test
-    public void resolveAsyncAttributes() {
-
-        TestBean testBean1 = new TestBean("Bean1");
-        TestBean testBean2 = new TestBean("Bean2");
-        Map<String, Object> attributes = new HashMap();
-        attributes.put("attr1", Mono.just(testBean1));
-        attributes.put("attr2", Flux.just(testBean1, testBean2));
-        attributes.put("attr3", Single.just(testBean2));
-        attributes.put("attr4", Observable.just(testBean1, testBean2));
-        attributes.put("attr5", Mono.empty());
-
-        TestView view = new TestView();
-        StepVerifier.create(view.render(attributes, null, this.exchange)).verifyComplete();
-
-        assertEquals(testBean1, view.attributes.get("attr1"));
-        assertArrayEquals(new TestBean[] {testBean1, testBean2}, ((List<TestBean>)view.attributes.get("attr2")).toArray());
-        assertEquals(testBean2, view.attributes.get("attr3"));
-        assertArrayEquals(new TestBean[] {testBean1, testBean2}, ((List<TestBean>)view.attributes.get("attr4")).toArray());
-        assertNull(view.attributes.get("attr5"));
-    }
-
-
-    private static class TestView extends AbstractView {
-
-        private Map<String, Object> attributes;
-
-        @Override
-        protected Mono<Void> renderInternal(Map<String, Object> renderAttributes, MediaType contentType, ServerWebExchange exchange) {
-            this.attributes = renderAttributes;
-            return Mono.empty();
-        }
-
-        public Map<String, Object> getAttributes() {
-            return this.attributes;
-        }
-    }
-}
diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/RedirectViewTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/RedirectViewTests.java
index d0ba047..90c7422 100644
--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/RedirectViewTests.java
+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/RedirectViewTests.java
@@ -61,7 +61,7 @@ public class RedirectViewTests {
 	public void defaultStatusCode() {
 		String url = "http://url.somewhere.com";
 		RedirectView view = new RedirectView(url);
-		view.render(new HashMap<>(), MediaType.TEXT_HTML, this.exchange).block();
+		view.render(new HashMap<>(), MediaType.TEXT_HTML, this.exchange);
 		assertEquals(HttpStatus.SEE_OTHER, this.exchange.getResponse().getStatusCode());
 		assertEquals(URI.create(url), this.exchange.getResponse().getHeaders().getLocation());
 	}
@@ -70,7 +70,7 @@ public class RedirectViewTests {
 	public void customStatusCode() {
 		String url = "http://url.somewhere.com";
 		RedirectView view = new RedirectView(url, HttpStatus.FOUND);
-		view.render(new HashMap<>(), MediaType.TEXT_HTML, this.exchange).block();
+		view.render(new HashMap<>(), MediaType.TEXT_HTML, this.exchange);
 		assertEquals(HttpStatus.FOUND, this.exchange.getResponse().getStatusCode());
 		assertEquals(URI.create(url), this.exchange.getResponse().getHeaders().getLocation());
 	}
@@ -79,7 +79,7 @@ public class RedirectViewTests {
 	public void contextRelative() {
 		String url = "/test.html";
 		RedirectView view = new RedirectView(url);
-		view.render(new HashMap<>(), MediaType.TEXT_HTML, this.exchange).block();
+		view.render(new HashMap<>(), MediaType.TEXT_HTML, this.exchange);
 		assertEquals(URI.create("/context/test.html"), this.exchange.getResponse().getHeaders().getLocation());
 	}
 
@@ -87,7 +87,7 @@ public class RedirectViewTests {
 	public void contextRelativeQueryParam() {
 		String url = "/test.html?id=1";
 		RedirectView view = new RedirectView(url);
-		view.render(new HashMap<>(), MediaType.TEXT_HTML, this.exchange).block();
+		view.render(new HashMap<>(), MediaType.TEXT_HTML, this.exchange);
 		assertEquals(URI.create("/context/test.html?id=1"), this.exchange.getResponse().getHeaders().getLocation());
 	}
 
@@ -111,7 +111,7 @@ public class RedirectViewTests {
 		String url = "http://url.somewhere.com?foo={foo}";
 		Map<String, String> model = Collections.singletonMap("foo", "bar");
 		RedirectView view = new RedirectView(url);
-		view.render(model, MediaType.TEXT_HTML, this.exchange).block();
+		view.render(model, MediaType.TEXT_HTML, this.exchange);
 		assertEquals(URI.create("http://url.somewhere.com?foo=bar"), this.exchange.getResponse().getHeaders().getLocation());
 	}
 
@@ -121,7 +121,7 @@ public class RedirectViewTests {
 		Map<String, String> attributes = Collections.singletonMap("foo", "bar");
 		this.exchange.getAttributes().put(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, attributes);
 		RedirectView view = new RedirectView(url);
-		view.render(new HashMap<>(), MediaType.TEXT_HTML, exchange).block();
+		view.render(new HashMap<>(), MediaType.TEXT_HTML, exchange);
 		assertEquals(URI.create("http://url.somewhere.com?foo=bar"), this.exchange.getResponse().getHeaders().getLocation());
 	}
 
@@ -130,7 +130,7 @@ public class RedirectViewTests {
 		RedirectView view = new RedirectView("http://url.somewhere.com?foo=bar#bazz");
 		view.setPropagateQuery(true);
 		this.exchange = MockServerHttpRequest.get("http://url.somewhere.com?a=b&c=d").toExchange();
-		view.render(new HashMap<>(), MediaType.TEXT_HTML, this.exchange).block();
+		view.render(new HashMap<>(), MediaType.TEXT_HTML, this.exchange);
 		assertEquals(HttpStatus.SEE_OTHER, this.exchange.getResponse().getStatusCode());
 		assertEquals(URI.create("http://url.somewhere.com?foo=bar&a=b&c=d#bazz"),
 				this.exchange.getResponse().getHeaders().getLocation());
diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java
index 293d4f9..a9482cc 100644
--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java
+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java
@@ -32,6 +32,7 @@ import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
 import rx.Completable;
+import rx.Observable;
 import rx.Single;
 
 import org.springframework.core.MethodParameter;
@@ -248,6 +249,34 @@ public class ViewResolutionResultHandlerTests {
 				.verify();
 	}
 
+	@Test
+	public void modelWithAsyncAttributes() throws Exception {
+		this.bindingContext.getModel()
+				.addAttribute("attr1", Mono.just(new TestBean("Bean1")))
+				.addAttribute("attr2", Flux.just(new TestBean("Bean1"), new TestBean("Bean2")))
+				.addAttribute("attr3", Single.just(new TestBean("Bean2")))
+				.addAttribute("attr4", Observable.just(new TestBean("Bean1"), new TestBean("Bean2")))
+				.addAttribute("attr5", Mono.empty());
+
+		MethodParameter returnType = on(TestController.class).resolveReturnType(void.class);
+		HandlerResult result = new HandlerResult(new Object(), null, returnType, this.bindingContext);
+		ViewResolutionResultHandler handler = resultHandler(new TestViewResolver("account"));
+
+		MockServerWebExchange exchange = get("/account").toExchange();
+
+		handler.handleResult(exchange, result).block(Duration.ofMillis(5000));
+		assertResponseBody(exchange, "account: {" +
+				"attr1=TestBean[name=Bean1], " +
+				"attr2=[TestBean[name=Bean1], TestBean[name=Bean2]], " +
+				"attr3=TestBean[name=Bean2], " +
+				"attr4=[TestBean[name=Bean1], TestBean[name=Bean2]], " +
+				"org.springframework.validation.BindingResult.attr1=" +
+				"org.springframework.validation.BeanPropertyBindingResult: 0 errors, " +
+				"org.springframework.validation.BindingResult.attr3=" +
+				"org.springframework.validation.BeanPropertyBindingResult: 0 errors" +
+				"}");
+	}
+
 
 	private ViewResolutionResultHandler resultHandler(ViewResolver... resolvers) {
 		return resultHandler(Collections.emptyList(), resolvers);
